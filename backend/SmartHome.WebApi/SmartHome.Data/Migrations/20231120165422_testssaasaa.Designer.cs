// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SmartHome.Data;

#nullable disable

namespace SmartHome.Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20231120165422_testssaasaa")]
    partial class testssaasaa
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SmartHome.Data.Entities.ActivationTokenEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("expires")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("ActivationTokens");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.CityEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("67ab2055-9cb9-4bf9-bb26-636489216327"),
                            CountryId = new Guid("18953234-7123-4f1a-b27d-ca1cb2f09007"),
                            Name = "New York"
                        },
                        new
                        {
                            Id = new Guid("158f3813-9ca8-49de-b787-266b3c49b717"),
                            CountryId = new Guid("18953234-7123-4f1a-b27d-ca1cb2f09007"),
                            Name = "Los Angeles"
                        },
                        new
                        {
                            Id = new Guid("8cf7d2df-8de0-41a0-a9ce-b08b158f20c7"),
                            CountryId = new Guid("18953234-7123-4f1a-b27d-ca1cb2f09007"),
                            Name = "Chicago"
                        },
                        new
                        {
                            Id = new Guid("777a71f6-9309-4155-b3e9-818556389fde"),
                            CountryId = new Guid("72687f13-581a-4f9d-81bc-63c751bd3c07"),
                            Name = "London"
                        },
                        new
                        {
                            Id = new Guid("559f395c-e973-46e1-91f1-c36c876a8c40"),
                            CountryId = new Guid("5be7e282-ec4d-467f-bed6-b89d71ff391c"),
                            Name = "Paris"
                        },
                        new
                        {
                            Id = new Guid("b1b7ba34-7a5d-426d-84ee-bd9303b3d826"),
                            CountryId = new Guid("81aefaf4-014d-4d47-aeb1-28dd4b429414"),
                            Name = "Berlin"
                        },
                        new
                        {
                            Id = new Guid("fedc8dbe-528b-430a-910a-50947d1a30b5"),
                            CountryId = new Guid("484951e0-d94b-447a-9596-07b09da6c717"),
                            Name = "Tokyo"
                        },
                        new
                        {
                            Id = new Guid("bd324a2f-0c19-4e63-802b-fb4e930dff29"),
                            CountryId = new Guid("b248d8c0-ec55-4368-8c1d-a1af92e2f19d"),
                            Name = "Beijing"
                        },
                        new
                        {
                            Id = new Guid("4856052f-0133-4b48-9b62-ea2f09332ad6"),
                            CountryId = new Guid("44c9df90-281a-4852-9868-d734969e9ff2"),
                            Name = "Sydney"
                        },
                        new
                        {
                            Id = new Guid("e55e5953-3530-4059-9408-f65d90d5b942"),
                            CountryId = new Guid("6101f200-d8ac-457a-8911-733f142a0d7a"),
                            Name = "Toronto"
                        },
                        new
                        {
                            Id = new Guid("dcf01f7d-bd72-4d3f-919e-0e8f2bda2fe2"),
                            CountryId = new Guid("8ecedf17-328d-4bbf-846c-016a8e19b9eb"),
                            Name = "Mumbai"
                        },
                        new
                        {
                            Id = new Guid("8e20320b-1a96-443f-a26e-95b29370436f"),
                            CountryId = new Guid("e6917790-93dc-4f1a-b9e3-8239546c0f1a"),
                            Name = "Cape Town"
                        },
                        new
                        {
                            Id = new Guid("1ac48790-630c-4fed-bc86-467cde3e942c"),
                            CountryId = new Guid("4031e316-15cc-46a4-ac12-99217f2232b8"),
                            Name = "Rio de Janeiro"
                        },
                        new
                        {
                            Id = new Guid("5dfbe00c-d025-42d1-b83f-1746b36137e3"),
                            CountryId = new Guid("e60b07e0-4eff-4945-9e05-b46f3d9d5622"),
                            Name = "Moscow"
                        },
                        new
                        {
                            Id = new Guid("7384a259-2f94-4750-a72b-e17f39f6e6d6"),
                            CountryId = new Guid("b554ddab-ede3-4334-80ad-e95b777f71cb"),
                            Name = "Dubai"
                        },
                        new
                        {
                            Id = new Guid("c3ac7cfc-ff89-4ca5-b236-2b3ddafa9f9f"),
                            CountryId = new Guid("b50cb882-6abb-4445-a7ec-36bb699a8300"),
                            Name = "Stockholm"
                        },
                        new
                        {
                            Id = new Guid("e13940b1-11c6-4fda-9597-60838a9214f7"),
                            CountryId = new Guid("f5831793-c89a-4545-9bae-9dc9b0b5fd33"),
                            Name = "Seoul"
                        },
                        new
                        {
                            Id = new Guid("1e971ada-61be-40e3-bd13-7550ed9bff84"),
                            CountryId = new Guid("830e471f-6d95-4bc2-be6e-bbb469396887"),
                            Name = "Mexico City"
                        },
                        new
                        {
                            Id = new Guid("e22c8460-53fa-41dd-b9d9-25a00c72571b"),
                            CountryId = new Guid("cf31ea30-7bc2-46eb-aac4-8d007f62ec70"),
                            Name = "Amsterdam"
                        },
                        new
                        {
                            Id = new Guid("d29f88c2-ac1a-4b15-9d40-79494506d10a"),
                            CountryId = new Guid("a43b7da0-e606-4a00-b985-7d11e87c43f9"),
                            Name = "Oslo"
                        },
                        new
                        {
                            Id = new Guid("21a8f0fe-7776-492c-9a9f-f1aac093ccf7"),
                            CountryId = new Guid("6004c087-2cd3-46c7-9bb2-79208771972a"),
                            Name = "Hanoi"
                        },
                        new
                        {
                            Id = new Guid("3485542b-e8c4-4afc-ba52-c3d519b02fde"),
                            CountryId = new Guid("fcc139bf-c5a6-4178-a983-6823db2c8973"),
                            Name = "Bangkok"
                        },
                        new
                        {
                            Id = new Guid("c980c8ba-77ee-44c9-b924-78f0fcdb6633"),
                            CountryId = new Guid("dfedf653-26be-492c-8512-84d9fb1c8bc2"),
                            Name = "Istanbul"
                        },
                        new
                        {
                            Id = new Guid("ff325ba6-51e1-44ec-88e8-d6856d8006cc"),
                            CountryId = new Guid("28c78132-1817-4567-bb28-19babef4ba29"),
                            Name = "Buenos Aires"
                        },
                        new
                        {
                            Id = new Guid("0fdb14e2-675a-4e64-af71-0cd9e19cc682"),
                            CountryId = new Guid("d463f4c9-9c44-4c05-8abe-87b525b2bdc9"),
                            Name = "Rome"
                        },
                        new
                        {
                            Id = new Guid("11fe8026-9a21-4135-8c3e-8bbdeac87927"),
                            CountryId = new Guid("d908bcba-b4ab-43be-b663-d2ceb3999d95"),
                            Name = "Cairo"
                        },
                        new
                        {
                            Id = new Guid("5074143d-3e5c-45d7-af9a-36ba82102ba8"),
                            CountryId = new Guid("2ed22ffd-f0e3-4dba-bd66-4e0d4255df5d"),
                            Name = "Lagos"
                        },
                        new
                        {
                            Id = new Guid("1b92c793-cafe-4a5b-81af-bacc6267b372"),
                            CountryId = new Guid("24a4097c-9891-4728-954a-3ced793c5a05"),
                            Name = "Auckland"
                        },
                        new
                        {
                            Id = new Guid("284f13e1-ba80-4ec2-bf6a-f728f3e7ec80"),
                            CountryId = new Guid("0d379f75-3035-4775-a74e-c62847de4024"),
                            Name = "Nairobi"
                        },
                        new
                        {
                            Id = new Guid("281e68cb-cb5b-4ab3-b67f-ff45cd8105db"),
                            CountryId = new Guid("df9ce50d-6aec-432a-baf1-d2f9c34e0ccd"),
                            Name = "Barcelona"
                        },
                        new
                        {
                            Id = new Guid("251ce104-9bdd-46f3-a424-09b979758445"),
                            CountryId = new Guid("ce07bbe6-74bb-47f3-a711-4812af04feb0"),
                            Name = "Athens"
                        },
                        new
                        {
                            Id = new Guid("a8986ab5-2395-4b00-8e50-84245357d4e0"),
                            CountryId = new Guid("6df2b041-5925-4e84-8f90-4db696954a83"),
                            Name = "Dublin"
                        },
                        new
                        {
                            Id = new Guid("3bcdee3d-5db1-44f6-8450-7e9e64534253"),
                            CountryId = new Guid("60ba327e-3270-4d21-8da8-86cf024c656b"),
                            Name = "Zurich"
                        },
                        new
                        {
                            Id = new Guid("e950dcf0-df5b-47b8-9fed-1117df310c89"),
                            CountryId = new Guid("94c56f29-9298-47f0-8333-a14bca260796"),
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = new Guid("cd1ecac9-b385-4fb3-9674-6a7a37eb3eee"),
                            CountryId = new Guid("b00ae93c-0aae-42aa-81f4-6f91678f2130"),
                            Name = "Vienna"
                        },
                        new
                        {
                            Id = new Guid("072c8a06-1306-46f9-9187-224b2d00224d"),
                            CountryId = new Guid("b248d8c0-ec55-4368-8c1d-a1af92e2f19d"),
                            Name = "Hong Kong"
                        },
                        new
                        {
                            Id = new Guid("1f414dbf-c41a-41f4-97f9-261fe51c759b"),
                            CountryId = new Guid("16cb80f9-5298-420e-9c52-f7b9d0edbd7b"),
                            Name = "Copenhagen"
                        },
                        new
                        {
                            Id = new Guid("5541918f-9221-4317-a560-ad972e05ff71"),
                            CountryId = new Guid("030ba078-96af-4d67-8adb-2f7fe1229b51"),
                            Name = "Lisbon"
                        },
                        new
                        {
                            Id = new Guid("e473ab39-6962-4177-8f1a-ac42044c9871"),
                            CountryId = new Guid("cb81a0a8-4463-4903-a1a4-d194c6531321"),
                            Name = "Warsaw"
                        },
                        new
                        {
                            Id = new Guid("3a09a228-a822-46f2-8719-073e5ee53b26"),
                            CountryId = new Guid("10db456d-a177-4b82-80e5-353c884e0d1d"),
                            Name = "Prague"
                        },
                        new
                        {
                            Id = new Guid("9fdfd741-ac25-45b1-a32f-3b3fb801a7ba"),
                            CountryId = new Guid("7cf89313-5a6c-44c4-9f07-35e876159c0f"),
                            Name = "Budapest"
                        },
                        new
                        {
                            Id = new Guid("83b723cb-13fc-47dd-9574-ce0a8ff92585"),
                            CountryId = new Guid("df504f2e-78e1-4f29-838e-367ecd1c6b51"),
                            Name = "Brussels"
                        },
                        new
                        {
                            Id = new Guid("c6b9f477-e935-49a0-a868-225406a01350"),
                            CountryId = new Guid("134aebfe-c999-4a29-bee9-d59af12abe0a"),
                            Name = "Helsinki"
                        });
                });

            modelBuilder.Entity("SmartHome.Data.Entities.CountryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("18953234-7123-4f1a-b27d-ca1cb2f09007"),
                            Name = "USA"
                        },
                        new
                        {
                            Id = new Guid("72687f13-581a-4f9d-81bc-63c751bd3c07"),
                            Name = "UK"
                        },
                        new
                        {
                            Id = new Guid("5be7e282-ec4d-467f-bed6-b89d71ff391c"),
                            Name = "France"
                        },
                        new
                        {
                            Id = new Guid("81aefaf4-014d-4d47-aeb1-28dd4b429414"),
                            Name = "Germany"
                        },
                        new
                        {
                            Id = new Guid("484951e0-d94b-447a-9596-07b09da6c717"),
                            Name = "Japan"
                        },
                        new
                        {
                            Id = new Guid("b248d8c0-ec55-4368-8c1d-a1af92e2f19d"),
                            Name = "China"
                        },
                        new
                        {
                            Id = new Guid("44c9df90-281a-4852-9868-d734969e9ff2"),
                            Name = "Australia"
                        },
                        new
                        {
                            Id = new Guid("6101f200-d8ac-457a-8911-733f142a0d7a"),
                            Name = "Canada"
                        },
                        new
                        {
                            Id = new Guid("8ecedf17-328d-4bbf-846c-016a8e19b9eb"),
                            Name = "India"
                        },
                        new
                        {
                            Id = new Guid("e6917790-93dc-4f1a-b9e3-8239546c0f1a"),
                            Name = "South Africa"
                        },
                        new
                        {
                            Id = new Guid("4031e316-15cc-46a4-ac12-99217f2232b8"),
                            Name = "Brazil"
                        },
                        new
                        {
                            Id = new Guid("e60b07e0-4eff-4945-9e05-b46f3d9d5622"),
                            Name = "Russia"
                        },
                        new
                        {
                            Id = new Guid("b554ddab-ede3-4334-80ad-e95b777f71cb"),
                            Name = "UAE"
                        },
                        new
                        {
                            Id = new Guid("b50cb882-6abb-4445-a7ec-36bb699a8300"),
                            Name = "Sweden"
                        },
                        new
                        {
                            Id = new Guid("f5831793-c89a-4545-9bae-9dc9b0b5fd33"),
                            Name = "South Korea"
                        },
                        new
                        {
                            Id = new Guid("830e471f-6d95-4bc2-be6e-bbb469396887"),
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = new Guid("cf31ea30-7bc2-46eb-aac4-8d007f62ec70"),
                            Name = "Netherlands"
                        },
                        new
                        {
                            Id = new Guid("a43b7da0-e606-4a00-b985-7d11e87c43f9"),
                            Name = "Norway"
                        },
                        new
                        {
                            Id = new Guid("6004c087-2cd3-46c7-9bb2-79208771972a"),
                            Name = "Vietnam"
                        },
                        new
                        {
                            Id = new Guid("fcc139bf-c5a6-4178-a983-6823db2c8973"),
                            Name = "Thailand"
                        },
                        new
                        {
                            Id = new Guid("dfedf653-26be-492c-8512-84d9fb1c8bc2"),
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = new Guid("28c78132-1817-4567-bb28-19babef4ba29"),
                            Name = "Argentina"
                        },
                        new
                        {
                            Id = new Guid("d463f4c9-9c44-4c05-8abe-87b525b2bdc9"),
                            Name = "Italy"
                        },
                        new
                        {
                            Id = new Guid("d908bcba-b4ab-43be-b663-d2ceb3999d95"),
                            Name = "Egypt"
                        },
                        new
                        {
                            Id = new Guid("2ed22ffd-f0e3-4dba-bd66-4e0d4255df5d"),
                            Name = "Nigeria"
                        },
                        new
                        {
                            Id = new Guid("24a4097c-9891-4728-954a-3ced793c5a05"),
                            Name = "New Zealand"
                        },
                        new
                        {
                            Id = new Guid("0d379f75-3035-4775-a74e-c62847de4024"),
                            Name = "Kenya"
                        },
                        new
                        {
                            Id = new Guid("df9ce50d-6aec-432a-baf1-d2f9c34e0ccd"),
                            Name = "Spain"
                        },
                        new
                        {
                            Id = new Guid("ce07bbe6-74bb-47f3-a711-4812af04feb0"),
                            Name = "Greece"
                        },
                        new
                        {
                            Id = new Guid("6df2b041-5925-4e84-8f90-4db696954a83"),
                            Name = "Ireland"
                        },
                        new
                        {
                            Id = new Guid("60ba327e-3270-4d21-8da8-86cf024c656b"),
                            Name = "Switzerland"
                        },
                        new
                        {
                            Id = new Guid("94c56f29-9298-47f0-8333-a14bca260796"),
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = new Guid("b00ae93c-0aae-42aa-81f4-6f91678f2130"),
                            Name = "Austria"
                        },
                        new
                        {
                            Id = new Guid("16cb80f9-5298-420e-9c52-f7b9d0edbd7b"),
                            Name = "Denmark"
                        },
                        new
                        {
                            Id = new Guid("030ba078-96af-4d67-8adb-2f7fe1229b51"),
                            Name = "Portugal"
                        },
                        new
                        {
                            Id = new Guid("cb81a0a8-4463-4903-a1a4-d194c6531321"),
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("10db456d-a177-4b82-80e5-353c884e0d1d"),
                            Name = "Czech Republic"
                        },
                        new
                        {
                            Id = new Guid("7cf89313-5a6c-44c4-9f07-35e876159c0f"),
                            Name = "Hungary"
                        },
                        new
                        {
                            Id = new Guid("df504f2e-78e1-4f29-838e-367ecd1c6b51"),
                            Name = "Belgium"
                        },
                        new
                        {
                            Id = new Guid("134aebfe-c999-4a29-bee9-d59af12abe0a"),
                            Name = "Finland"
                        });
                });

            modelBuilder.Entity("SmartHome.Data.Entities.PropertyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("AreaSquareMeters")
                        .HasColumnType("double precision");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("NumberOfFloors")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Connection")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DeviceStatus")
                        .HasColumnType("integer");

                    b.Property<int>("DeviceType")
                        .HasColumnType("integer");

                    b.Property<float>("EnergySpending")
                        .HasColumnType("real");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PowerSupply")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SmartDevices");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SolarPanelEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("Efficiency")
                        .HasColumnType("real");

                    b.Property<float>("Size")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("SolarPanels");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SprinkleModeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ModeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SprinkleModes");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.WashingMachineModeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ModeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("WashingMachineEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WashingMachineEntityId");

                    b.ToTable("WashingMachineModes");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.AirConditionerEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<float>("CurrentTemperature")
                        .HasColumnType("real");

                    b.Property<float>("MaximumTemperature")
                        .HasColumnType("real");

                    b.Property<float>("MinimumTemperature")
                        .HasColumnType("real");

                    b.Property<int>("Mode")
                        .HasColumnType("integer");

                    b.ToTable("AirConditioners", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.CarChargerEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<float>("ChargingPower")
                        .HasColumnType("real");

                    b.Property<int>("ConnectorNumber")
                        .HasColumnType("integer");

                    b.ToTable("CarChargers", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.CarGateEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Mode")
                        .HasColumnType("integer");

                    b.Property<bool>("isCarClose")
                        .HasColumnType("boolean");

                    b.ToTable("CarGates", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.EnvironmentalConditionsSensorEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<float>("AirHumidity")
                        .HasColumnType("real");

                    b.Property<float>("RoomTemperature")
                        .HasColumnType("real");

                    b.ToTable("EnvironmentalConditionsSensors", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.HomeBatteryEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<float>("BatteryLevel")
                        .HasColumnType("real");

                    b.Property<float>("BatterySize")
                        .HasColumnType("real");

                    b.ToTable("HomeBatteries", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.LampEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<float>("CurrentLight")
                        .HasColumnType("real");

                    b.Property<float>("LightThreshold")
                        .HasColumnType("real");

                    b.ToTable("Lamps", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SolarPanelSystemEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.ToTable("SolarPanelSystems", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SprinklerEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<Guid>("ModeId")
                        .HasColumnType("uuid");

                    b.HasIndex("ModeId");

                    b.ToTable("Sprinklers", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.WashingMachineEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<Guid?>("CurrentModeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasIndex("CurrentModeId");

                    b.ToTable("WashingMachines", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.CityEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.CountryEntity", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.PropertyEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.CityEntity", "City")
                        .WithMany("Properties")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.WashingMachineModeEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.WashingMachineEntity", null)
                        .WithMany("Modes")
                        .HasForeignKey("WashingMachineEntityId");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.AirConditionerEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.AirConditionerEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.CarChargerEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.CarChargerEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.CarGateEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.CarGateEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.EnvironmentalConditionsSensorEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.EnvironmentalConditionsSensorEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.HomeBatteryEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.HomeBatteryEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.LampEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.LampEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SolarPanelSystemEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.SolarPanelSystemEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SprinklerEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.SprinklerEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SprinkleModeEntity", "Mode")
                        .WithMany()
                        .HasForeignKey("ModeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mode");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.WashingMachineEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.WashingMachineModeEntity", "CurrentMode")
                        .WithMany()
                        .HasForeignKey("CurrentModeId");

                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.WashingMachineEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentMode");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.CityEntity", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.CountryEntity", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.WashingMachineEntity", b =>
                {
                    b.Navigation("Modes");
                });
#pragma warning restore 612, 618
        }
    }
}
