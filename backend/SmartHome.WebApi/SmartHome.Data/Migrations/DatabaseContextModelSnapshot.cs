// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SmartHome.Data;

#nullable disable

namespace SmartHome.Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SmartHome.Data.Entities.ActivationTokenEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("expires")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("ActivationTokens");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.CityEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("faeae182-76b5-499d-8bfa-ca8c06a0c60a"),
                            CountryId = new Guid("55e924e4-297f-4d79-9fc5-7e0d0d772a31"),
                            Name = "New York"
                        },
                        new
                        {
                            Id = new Guid("2a70036b-62de-4c6f-bd13-c61786635af2"),
                            CountryId = new Guid("55e924e4-297f-4d79-9fc5-7e0d0d772a31"),
                            Name = "Los Angeles"
                        },
                        new
                        {
                            Id = new Guid("616129e0-b0fb-41d7-b6fa-4aad3a507b98"),
                            CountryId = new Guid("55e924e4-297f-4d79-9fc5-7e0d0d772a31"),
                            Name = "Chicago"
                        },
                        new
                        {
                            Id = new Guid("a1d004af-9e51-4463-8aab-bbb904ef5e52"),
                            CountryId = new Guid("fc7188ba-6c5b-4fdf-a3ec-e4a875301baa"),
                            Name = "London"
                        },
                        new
                        {
                            Id = new Guid("e24ad63e-ee87-4da6-83d3-751edfdff5a8"),
                            CountryId = new Guid("2fce0409-09ee-4db4-ba1b-236eaee041d8"),
                            Name = "Paris"
                        },
                        new
                        {
                            Id = new Guid("734be4eb-4d1c-451d-82c5-3f17b30ff555"),
                            CountryId = new Guid("27f93897-cda1-4a19-a268-1d799d79bf6c"),
                            Name = "Berlin"
                        },
                        new
                        {
                            Id = new Guid("bb269bf9-9692-448a-9db4-b1b6fd784ccb"),
                            CountryId = new Guid("df97b695-bf7d-4585-a592-a4f6916d84d2"),
                            Name = "Tokyo"
                        },
                        new
                        {
                            Id = new Guid("effbd0c3-9bae-45da-bc6c-da488306b94b"),
                            CountryId = new Guid("7e07f290-30ad-4339-98bd-169b3fdf2594"),
                            Name = "Beijing"
                        },
                        new
                        {
                            Id = new Guid("36528697-92d4-40f5-abbd-bfabbf5b358b"),
                            CountryId = new Guid("a1fb5fe3-5197-47c2-9200-c3a476246b5b"),
                            Name = "Sydney"
                        },
                        new
                        {
                            Id = new Guid("80e26ac8-c40e-40c4-8011-c2ec20abf799"),
                            CountryId = new Guid("31a0f15e-188b-4b50-9189-8d673f5e44d1"),
                            Name = "Toronto"
                        },
                        new
                        {
                            Id = new Guid("721cf684-d62c-48cc-a9bc-e3c11ffc0b1e"),
                            CountryId = new Guid("c32dfdb7-4d89-442b-bb3e-398561e3665b"),
                            Name = "Mumbai"
                        },
                        new
                        {
                            Id = new Guid("3d8d46b9-59a0-4ca2-9efa-4eb08d3ced40"),
                            CountryId = new Guid("2bfe27d3-be67-4cca-afbd-d586b7462bdf"),
                            Name = "Cape Town"
                        },
                        new
                        {
                            Id = new Guid("2f814904-0857-4869-bad7-c5cf8b86d85b"),
                            CountryId = new Guid("dc82d5ca-2ecd-41e2-b347-31a96962f156"),
                            Name = "Rio de Janeiro"
                        },
                        new
                        {
                            Id = new Guid("8fae6955-b41f-4174-97c2-3625f00f52d1"),
                            CountryId = new Guid("c6ce5369-fa17-497e-9feb-787c7d55e1ea"),
                            Name = "Moscow"
                        },
                        new
                        {
                            Id = new Guid("b8d2ac25-6ff1-4139-80df-75e6a6e1ed3d"),
                            CountryId = new Guid("5bc21ed9-a6d6-4d7e-ac48-e3d46782872c"),
                            Name = "Dubai"
                        },
                        new
                        {
                            Id = new Guid("11f62efc-036e-4816-a794-93d629d49703"),
                            CountryId = new Guid("8478c45b-17ff-4a1f-8049-d5079416ca96"),
                            Name = "Stockholm"
                        },
                        new
                        {
                            Id = new Guid("9c793067-114d-4c50-b337-497b434f9ce2"),
                            CountryId = new Guid("d5953c65-2ad0-4105-9bd4-c5bfbd6d79cb"),
                            Name = "Seoul"
                        },
                        new
                        {
                            Id = new Guid("bb4bb656-e157-4013-afa3-723290967e21"),
                            CountryId = new Guid("f809e1bc-9d0e-46c5-8ede-5f81e0830875"),
                            Name = "Mexico City"
                        },
                        new
                        {
                            Id = new Guid("a50b125e-9dce-42fb-b3bc-5e719097ed61"),
                            CountryId = new Guid("d5d546ce-9502-4242-b9d7-d50880b7a2ea"),
                            Name = "Amsterdam"
                        },
                        new
                        {
                            Id = new Guid("7d4c8930-c3ef-470f-9be6-3e5157b3cff8"),
                            CountryId = new Guid("dea8d02e-ae87-4582-80bb-e55781e4edc6"),
                            Name = "Oslo"
                        },
                        new
                        {
                            Id = new Guid("c3de7a28-9167-4168-9a86-810b36371046"),
                            CountryId = new Guid("bc0cbb2e-4b7b-46ea-b704-42e16330f548"),
                            Name = "Hanoi"
                        },
                        new
                        {
                            Id = new Guid("9711e8b5-a852-41fe-988b-a25b9220cbeb"),
                            CountryId = new Guid("788b551e-5fdd-43e6-9252-ad21b967dcdf"),
                            Name = "Bangkok"
                        },
                        new
                        {
                            Id = new Guid("abd40e59-44df-4602-b503-a77736ef2589"),
                            CountryId = new Guid("abe32f46-00d6-432c-8398-b99d0a94b81c"),
                            Name = "Istanbul"
                        },
                        new
                        {
                            Id = new Guid("561adb67-70ed-4752-80e3-9eb5bd567901"),
                            CountryId = new Guid("19a93502-8c44-48fb-a9f0-575585225ce7"),
                            Name = "Buenos Aires"
                        },
                        new
                        {
                            Id = new Guid("e455ede4-9a41-4db7-9bc2-f923e4f6dc7b"),
                            CountryId = new Guid("6ba3b97a-93f3-4285-b972-d64c1995494d"),
                            Name = "Rome"
                        },
                        new
                        {
                            Id = new Guid("27c34b08-324e-4255-8be8-1e5023d83b10"),
                            CountryId = new Guid("d774c122-60ec-42eb-b573-05d1d82dda85"),
                            Name = "Cairo"
                        },
                        new
                        {
                            Id = new Guid("2e83895f-21bb-4a36-aa7a-a19322471766"),
                            CountryId = new Guid("ea6b6ae1-8c23-4c21-b859-beaf7546e749"),
                            Name = "Lagos"
                        },
                        new
                        {
                            Id = new Guid("f646a19b-21aa-4241-9a63-dd36d15927f6"),
                            CountryId = new Guid("6feef030-3cc1-4f8b-a6ac-3835976ec0a2"),
                            Name = "Auckland"
                        },
                        new
                        {
                            Id = new Guid("ff1e9a04-b202-43e7-a54c-b51b610a89e8"),
                            CountryId = new Guid("0eaf9b49-ea11-43d1-858f-564e9af285dd"),
                            Name = "Nairobi"
                        },
                        new
                        {
                            Id = new Guid("06eb572d-5635-47b2-8ca7-9e884c3c6128"),
                            CountryId = new Guid("80e8f629-9a4c-4313-b276-f3d9f1fb2a0e"),
                            Name = "Barcelona"
                        },
                        new
                        {
                            Id = new Guid("cffae31a-b431-42f8-bf55-c7782bda2d20"),
                            CountryId = new Guid("8b7ed4c8-3eba-4796-a258-4665c10173b9"),
                            Name = "Athens"
                        },
                        new
                        {
                            Id = new Guid("2f9d106f-30fa-46ce-b47e-4f11c042401f"),
                            CountryId = new Guid("81bc0bb4-98d1-4818-ac79-7a077e80c3e8"),
                            Name = "Dublin"
                        },
                        new
                        {
                            Id = new Guid("b6c46f2f-9ecf-41ca-bd65-dc44e37d601e"),
                            CountryId = new Guid("0613e743-9ef1-48c0-bec6-ac0483851314"),
                            Name = "Zurich"
                        },
                        new
                        {
                            Id = new Guid("c4eb1932-094f-4579-85b5-c13ffd5acdb8"),
                            CountryId = new Guid("0048439d-93b9-4292-8898-53a1d6304e4c"),
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = new Guid("bd8004d3-af2b-4ca7-ae7f-268236c412a7"),
                            CountryId = new Guid("4973da01-80f4-4efa-918d-eb74bfeabdc6"),
                            Name = "Vienna"
                        },
                        new
                        {
                            Id = new Guid("d76cf3e1-f74c-4344-abfa-53a9eebefbfa"),
                            CountryId = new Guid("7e07f290-30ad-4339-98bd-169b3fdf2594"),
                            Name = "Hong Kong"
                        },
                        new
                        {
                            Id = new Guid("8f818cbb-5bff-46b5-9f17-2ca05e2ea567"),
                            CountryId = new Guid("d4aaeffd-2b85-431e-9896-fdd1ae1acb31"),
                            Name = "Copenhagen"
                        },
                        new
                        {
                            Id = new Guid("a637644a-ddf0-4f31-9bde-6dc14d89b622"),
                            CountryId = new Guid("56d8e6f0-9c0d-470b-8726-d66c8e9f9c14"),
                            Name = "Lisbon"
                        },
                        new
                        {
                            Id = new Guid("7910314f-b632-44a4-aa5b-10a3d821c4a2"),
                            CountryId = new Guid("dccdc882-7605-4173-8dbf-fe043786704c"),
                            Name = "Warsaw"
                        },
                        new
                        {
                            Id = new Guid("1377cea0-e91a-484e-8f3b-042ac072e41a"),
                            CountryId = new Guid("aa5e1a97-35f8-4c2c-ada3-fddbdd2b5b92"),
                            Name = "Prague"
                        },
                        new
                        {
                            Id = new Guid("d0d5ac90-8221-45ef-987b-e4d7e8590d4e"),
                            CountryId = new Guid("2b4cd5a3-07ed-4518-bf2a-682e2a113f84"),
                            Name = "Budapest"
                        },
                        new
                        {
                            Id = new Guid("2df0ec14-21a8-4d58-be9f-b4bbb2e0dafb"),
                            CountryId = new Guid("0376cc46-c6e8-465c-8d6c-827a8988da97"),
                            Name = "Brussels"
                        },
                        new
                        {
                            Id = new Guid("123924f3-1af7-424b-afe6-2c17b0313f67"),
                            CountryId = new Guid("66ba0b63-6c09-47f2-aa97-bf63793b3345"),
                            Name = "Helsinki"
                        });
                });

            modelBuilder.Entity("SmartHome.Data.Entities.CountryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("55e924e4-297f-4d79-9fc5-7e0d0d772a31"),
                            Name = "USA"
                        },
                        new
                        {
                            Id = new Guid("fc7188ba-6c5b-4fdf-a3ec-e4a875301baa"),
                            Name = "UK"
                        },
                        new
                        {
                            Id = new Guid("2fce0409-09ee-4db4-ba1b-236eaee041d8"),
                            Name = "France"
                        },
                        new
                        {
                            Id = new Guid("27f93897-cda1-4a19-a268-1d799d79bf6c"),
                            Name = "Germany"
                        },
                        new
                        {
                            Id = new Guid("df97b695-bf7d-4585-a592-a4f6916d84d2"),
                            Name = "Japan"
                        },
                        new
                        {
                            Id = new Guid("7e07f290-30ad-4339-98bd-169b3fdf2594"),
                            Name = "China"
                        },
                        new
                        {
                            Id = new Guid("a1fb5fe3-5197-47c2-9200-c3a476246b5b"),
                            Name = "Australia"
                        },
                        new
                        {
                            Id = new Guid("31a0f15e-188b-4b50-9189-8d673f5e44d1"),
                            Name = "Canada"
                        },
                        new
                        {
                            Id = new Guid("c32dfdb7-4d89-442b-bb3e-398561e3665b"),
                            Name = "India"
                        },
                        new
                        {
                            Id = new Guid("2bfe27d3-be67-4cca-afbd-d586b7462bdf"),
                            Name = "South Africa"
                        },
                        new
                        {
                            Id = new Guid("dc82d5ca-2ecd-41e2-b347-31a96962f156"),
                            Name = "Brazil"
                        },
                        new
                        {
                            Id = new Guid("c6ce5369-fa17-497e-9feb-787c7d55e1ea"),
                            Name = "Russia"
                        },
                        new
                        {
                            Id = new Guid("5bc21ed9-a6d6-4d7e-ac48-e3d46782872c"),
                            Name = "UAE"
                        },
                        new
                        {
                            Id = new Guid("8478c45b-17ff-4a1f-8049-d5079416ca96"),
                            Name = "Sweden"
                        },
                        new
                        {
                            Id = new Guid("d5953c65-2ad0-4105-9bd4-c5bfbd6d79cb"),
                            Name = "South Korea"
                        },
                        new
                        {
                            Id = new Guid("f809e1bc-9d0e-46c5-8ede-5f81e0830875"),
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = new Guid("d5d546ce-9502-4242-b9d7-d50880b7a2ea"),
                            Name = "Netherlands"
                        },
                        new
                        {
                            Id = new Guid("dea8d02e-ae87-4582-80bb-e55781e4edc6"),
                            Name = "Norway"
                        },
                        new
                        {
                            Id = new Guid("bc0cbb2e-4b7b-46ea-b704-42e16330f548"),
                            Name = "Vietnam"
                        },
                        new
                        {
                            Id = new Guid("788b551e-5fdd-43e6-9252-ad21b967dcdf"),
                            Name = "Thailand"
                        },
                        new
                        {
                            Id = new Guid("abe32f46-00d6-432c-8398-b99d0a94b81c"),
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = new Guid("19a93502-8c44-48fb-a9f0-575585225ce7"),
                            Name = "Argentina"
                        },
                        new
                        {
                            Id = new Guid("6ba3b97a-93f3-4285-b972-d64c1995494d"),
                            Name = "Italy"
                        },
                        new
                        {
                            Id = new Guid("d774c122-60ec-42eb-b573-05d1d82dda85"),
                            Name = "Egypt"
                        },
                        new
                        {
                            Id = new Guid("ea6b6ae1-8c23-4c21-b859-beaf7546e749"),
                            Name = "Nigeria"
                        },
                        new
                        {
                            Id = new Guid("6feef030-3cc1-4f8b-a6ac-3835976ec0a2"),
                            Name = "New Zealand"
                        },
                        new
                        {
                            Id = new Guid("0eaf9b49-ea11-43d1-858f-564e9af285dd"),
                            Name = "Kenya"
                        },
                        new
                        {
                            Id = new Guid("80e8f629-9a4c-4313-b276-f3d9f1fb2a0e"),
                            Name = "Spain"
                        },
                        new
                        {
                            Id = new Guid("8b7ed4c8-3eba-4796-a258-4665c10173b9"),
                            Name = "Greece"
                        },
                        new
                        {
                            Id = new Guid("81bc0bb4-98d1-4818-ac79-7a077e80c3e8"),
                            Name = "Ireland"
                        },
                        new
                        {
                            Id = new Guid("0613e743-9ef1-48c0-bec6-ac0483851314"),
                            Name = "Switzerland"
                        },
                        new
                        {
                            Id = new Guid("0048439d-93b9-4292-8898-53a1d6304e4c"),
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = new Guid("4973da01-80f4-4efa-918d-eb74bfeabdc6"),
                            Name = "Austria"
                        },
                        new
                        {
                            Id = new Guid("d4aaeffd-2b85-431e-9896-fdd1ae1acb31"),
                            Name = "Denmark"
                        },
                        new
                        {
                            Id = new Guid("56d8e6f0-9c0d-470b-8726-d66c8e9f9c14"),
                            Name = "Portugal"
                        },
                        new
                        {
                            Id = new Guid("dccdc882-7605-4173-8dbf-fe043786704c"),
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("aa5e1a97-35f8-4c2c-ada3-fddbdd2b5b92"),
                            Name = "Czech Republic"
                        },
                        new
                        {
                            Id = new Guid("2b4cd5a3-07ed-4518-bf2a-682e2a113f84"),
                            Name = "Hungary"
                        },
                        new
                        {
                            Id = new Guid("0376cc46-c6e8-465c-8d6c-827a8988da97"),
                            Name = "Belgium"
                        },
                        new
                        {
                            Id = new Guid("66ba0b63-6c09-47f2-aa97-bf63793b3345"),
                            Name = "Finland"
                        });
                });

            modelBuilder.Entity("SmartHome.Data.Entities.PropertyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("AreaSquareMeters")
                        .HasColumnType("double precision");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("NumberOfFloors")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Connection")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DeviceStatus")
                        .HasColumnType("integer");

                    b.Property<int>("DeviceType")
                        .HasColumnType("integer");

                    b.Property<float>("EnergySpending")
                        .HasColumnType("real");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PowerSupply")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SmartDevices");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SolarPanelEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("Efficiency")
                        .HasColumnType("real");

                    b.Property<float>("Size")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("SolarPanels");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SprinkleModeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ModeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SprinkleModes");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.WashingMachineModeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ModeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("WashingMachineEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WashingMachineEntityId");

                    b.ToTable("WashingMachineModes");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.AirConditionerEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<float>("CurrentTemperature")
                        .HasColumnType("real");

                    b.Property<float>("MaximumTemperature")
                        .HasColumnType("real");

                    b.Property<float>("MinimumTemperature")
                        .HasColumnType("real");

                    b.Property<int>("Mode")
                        .HasColumnType("integer");

                    b.ToTable("AirConditioners", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.CarChargerEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<float>("ChargingPower")
                        .HasColumnType("real");

                    b.Property<int>("ConnectorNumber")
                        .HasColumnType("integer");

                    b.ToTable("CarChargers", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.CarGateEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<List<string>>("AllowedLicensePlates")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Mode")
                        .HasColumnType("integer");

                    b.Property<bool>("isCarClose")
                        .HasColumnType("boolean");

                    b.ToTable("CarGates", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.EnvironmentalConditionsSensorEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<float>("AirHumidity")
                        .HasColumnType("real");

                    b.Property<float>("RoomTemperature")
                        .HasColumnType("real");

                    b.ToTable("EnvironmentalConditionsSensors", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.HomeBatteryEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<float>("BatteryLevel")
                        .HasColumnType("real");

                    b.Property<float>("BatterySize")
                        .HasColumnType("real");

                    b.ToTable("HomeBatteries", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.LampEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<float>("CurrentLight")
                        .HasColumnType("real");

                    b.Property<float>("LightThreshold")
                        .HasColumnType("real");

                    b.ToTable("Lamps", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SolarPanelSystemEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.ToTable("SolarPanelSystems", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SprinklerEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<Guid?>("ModeId")
                        .HasColumnType("uuid");

                    b.HasIndex("ModeId");

                    b.ToTable("Sprinklers", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.WashingMachineEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<Guid?>("CurrentModeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasIndex("CurrentModeId");

                    b.ToTable("WashingMachines", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.CityEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.CountryEntity", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.PropertyEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.CityEntity", "City")
                        .WithMany("Properties")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.WashingMachineModeEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.WashingMachineEntity", null)
                        .WithMany("Modes")
                        .HasForeignKey("WashingMachineEntityId");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.AirConditionerEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.AirConditionerEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.CarChargerEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.CarChargerEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.CarGateEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.CarGateEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.EnvironmentalConditionsSensorEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.EnvironmentalConditionsSensorEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.HomeBatteryEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.HomeBatteryEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.LampEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.LampEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SolarPanelSystemEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.SolarPanelSystemEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SprinklerEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.SprinklerEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SprinkleModeEntity", "Mode")
                        .WithMany()
                        .HasForeignKey("ModeId");

                    b.Navigation("Mode");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.WashingMachineEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.WashingMachineModeEntity", "CurrentMode")
                        .WithMany()
                        .HasForeignKey("CurrentModeId");

                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.WashingMachineEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentMode");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.CityEntity", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.CountryEntity", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.WashingMachineEntity", b =>
                {
                    b.Navigation("Modes");
                });
#pragma warning restore 612, 618
        }
    }
}
