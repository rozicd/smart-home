// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SmartHome.Data;

#nullable disable

namespace SmartHome.Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20231120152624_testssaas")]
    partial class testssaas
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SmartHome.Data.Entities.ActivationTokenEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("expires")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("ActivationTokens");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.CityEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e7893701-7976-487d-b3fd-732629753b3e"),
                            CountryId = new Guid("08bf0948-2545-43ce-bd63-a9ecbbdab857"),
                            Name = "New York"
                        },
                        new
                        {
                            Id = new Guid("446f2fbb-c3f8-447c-ae77-c89349720943"),
                            CountryId = new Guid("08bf0948-2545-43ce-bd63-a9ecbbdab857"),
                            Name = "Los Angeles"
                        },
                        new
                        {
                            Id = new Guid("c159768b-a386-4eef-9395-2e048365f2c0"),
                            CountryId = new Guid("08bf0948-2545-43ce-bd63-a9ecbbdab857"),
                            Name = "Chicago"
                        },
                        new
                        {
                            Id = new Guid("5ae52838-a0c6-4eeb-a29f-7f7be0ceb355"),
                            CountryId = new Guid("78d2f36b-11c2-44fe-8e8d-13040fd15486"),
                            Name = "London"
                        },
                        new
                        {
                            Id = new Guid("ca0f4d88-c22c-46fe-9890-8f04cdea2c42"),
                            CountryId = new Guid("8356d3e9-e0fd-4100-804e-3a4c2b9050ba"),
                            Name = "Paris"
                        },
                        new
                        {
                            Id = new Guid("7c7009fc-c744-4343-b05a-9147ebc80775"),
                            CountryId = new Guid("ed1d6e52-5f48-42fb-b8a9-98d03da97e54"),
                            Name = "Berlin"
                        },
                        new
                        {
                            Id = new Guid("468f1c84-5793-4c0e-bf54-71596e38eeaa"),
                            CountryId = new Guid("1fcad7a9-ab66-4735-b501-9ef338938b62"),
                            Name = "Tokyo"
                        },
                        new
                        {
                            Id = new Guid("45e154a4-044e-49ce-b10f-ab324de6481d"),
                            CountryId = new Guid("94f5e989-d24f-4330-9660-c38d42c3330c"),
                            Name = "Beijing"
                        },
                        new
                        {
                            Id = new Guid("1dc1f1cf-768d-424f-aa5f-41956b1614a5"),
                            CountryId = new Guid("3759b8b1-be01-4c23-bf19-59819e4756d9"),
                            Name = "Sydney"
                        },
                        new
                        {
                            Id = new Guid("5ab48680-36c0-4f14-a2b3-a3f87a34188e"),
                            CountryId = new Guid("3a17a0c6-8a37-4b57-bb6a-aea88503fa85"),
                            Name = "Toronto"
                        },
                        new
                        {
                            Id = new Guid("17f06129-f6be-4d85-a50b-527fda9bece3"),
                            CountryId = new Guid("20e1b203-3527-409e-845e-86559aa65991"),
                            Name = "Mumbai"
                        },
                        new
                        {
                            Id = new Guid("3659f5a6-5cbf-49f5-adbd-e98ebf064f9a"),
                            CountryId = new Guid("1e99d342-9e2c-4a9a-a258-5462104dd390"),
                            Name = "Cape Town"
                        },
                        new
                        {
                            Id = new Guid("e8229a9d-84a3-4680-97f1-6b08953d7b04"),
                            CountryId = new Guid("1ae5dadd-2eeb-4bc6-a75a-4c81061d02d6"),
                            Name = "Rio de Janeiro"
                        },
                        new
                        {
                            Id = new Guid("6f3937dc-439d-4491-ab25-d2c602f3763d"),
                            CountryId = new Guid("f0dfa8b7-5dbe-47f0-9d37-f510d3b529c6"),
                            Name = "Moscow"
                        },
                        new
                        {
                            Id = new Guid("a464db0d-20e9-4d51-9457-b4c3e159cc98"),
                            CountryId = new Guid("8f670858-d3cc-4423-8da0-94f970160682"),
                            Name = "Dubai"
                        },
                        new
                        {
                            Id = new Guid("f16d6245-7473-4f69-ba69-473011313451"),
                            CountryId = new Guid("068229ec-aa5d-485a-9d33-55b98476e083"),
                            Name = "Stockholm"
                        },
                        new
                        {
                            Id = new Guid("2753b55e-c49f-4858-8071-208786542fbb"),
                            CountryId = new Guid("7facfb79-7a17-4d71-9171-bbba8a71b46a"),
                            Name = "Seoul"
                        },
                        new
                        {
                            Id = new Guid("41ac3c53-706a-4ed2-ac3a-3f682728fda8"),
                            CountryId = new Guid("42533db0-1e9f-4a27-b31b-98ebcf658514"),
                            Name = "Mexico City"
                        },
                        new
                        {
                            Id = new Guid("f7ef10a3-966c-495f-becb-ae902058dd30"),
                            CountryId = new Guid("95e16d9f-08ce-46aa-9237-f079c91d23f7"),
                            Name = "Amsterdam"
                        },
                        new
                        {
                            Id = new Guid("41e4490e-b380-47fd-ba10-a803815e202c"),
                            CountryId = new Guid("e95f592b-75ef-4897-bc24-cdf3f2db0af7"),
                            Name = "Oslo"
                        },
                        new
                        {
                            Id = new Guid("c6a11de4-cba9-4713-8a94-e9209cd8b1c8"),
                            CountryId = new Guid("3d706f52-aa83-4e8d-a381-88673b31c70a"),
                            Name = "Hanoi"
                        },
                        new
                        {
                            Id = new Guid("6846304f-be67-4551-acb1-eafd1f502e32"),
                            CountryId = new Guid("07923a07-bbc9-4430-bca7-4fa8ab4d285a"),
                            Name = "Bangkok"
                        },
                        new
                        {
                            Id = new Guid("cb1e9d69-bdd7-4996-a8bb-351674f0a490"),
                            CountryId = new Guid("e8cc6ced-11d9-46cc-a20e-ec8d658db44c"),
                            Name = "Istanbul"
                        },
                        new
                        {
                            Id = new Guid("c75a8923-0e7a-4ff9-bb7e-e85cd9797d9a"),
                            CountryId = new Guid("f0518549-cee4-4d9d-9e6a-3b34599cba20"),
                            Name = "Buenos Aires"
                        },
                        new
                        {
                            Id = new Guid("6574c091-4b0e-477a-bb62-5eb2b2aa413c"),
                            CountryId = new Guid("202698fc-481f-47f5-84c3-ad91fa4cce03"),
                            Name = "Rome"
                        },
                        new
                        {
                            Id = new Guid("c608d58c-118e-4eb3-9a5f-2ae62ab68e92"),
                            CountryId = new Guid("da089639-ea5f-492b-9031-a79b8fbde6cd"),
                            Name = "Cairo"
                        },
                        new
                        {
                            Id = new Guid("aaf64bd5-9c6c-4764-8688-c6d2f3d0c265"),
                            CountryId = new Guid("e4c81ecb-e5c4-4741-b398-bb4566955811"),
                            Name = "Lagos"
                        },
                        new
                        {
                            Id = new Guid("513eac37-8fbf-47a2-8d71-385f17af577f"),
                            CountryId = new Guid("db7e1306-e1b7-45be-a555-9d7c9788da0f"),
                            Name = "Auckland"
                        },
                        new
                        {
                            Id = new Guid("4796e598-9296-4876-95e6-4eb4b98d9dea"),
                            CountryId = new Guid("a6d94df4-d368-4f28-ae27-ee42d209cc09"),
                            Name = "Nairobi"
                        },
                        new
                        {
                            Id = new Guid("67c57068-d13c-414d-8421-7ed56c9133f3"),
                            CountryId = new Guid("6f002df8-0c8a-41f9-b66a-3699ddbeb029"),
                            Name = "Barcelona"
                        },
                        new
                        {
                            Id = new Guid("b41e8d68-5d7b-4718-a876-1d018e4d6bcf"),
                            CountryId = new Guid("9d8deb01-2585-4961-ab6c-7354f89886e4"),
                            Name = "Athens"
                        },
                        new
                        {
                            Id = new Guid("39f0fc86-cd82-4e77-8ce7-0a55efbf9e11"),
                            CountryId = new Guid("a82348c0-569f-4fef-a8ff-fc3466fa2142"),
                            Name = "Dublin"
                        },
                        new
                        {
                            Id = new Guid("a693dfc5-d93b-4ac8-9cf0-6d9dec2967f7"),
                            CountryId = new Guid("03c5c85e-3d36-4ae9-8ffa-0ceca960375d"),
                            Name = "Zurich"
                        },
                        new
                        {
                            Id = new Guid("0680ae2a-23be-4c38-bf5e-ce8b89149219"),
                            CountryId = new Guid("3da287b6-be7a-4447-9580-2ee45c711b37"),
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = new Guid("2616c9c4-1328-4561-bde9-32ba72b7448c"),
                            CountryId = new Guid("8a0ff199-2053-4eb2-a86b-9cdde7e9dea8"),
                            Name = "Vienna"
                        },
                        new
                        {
                            Id = new Guid("25dd483f-a109-45d4-a2c7-fb17535b9865"),
                            CountryId = new Guid("94f5e989-d24f-4330-9660-c38d42c3330c"),
                            Name = "Hong Kong"
                        },
                        new
                        {
                            Id = new Guid("223468d1-c838-4733-ba66-5cb97cf9b11e"),
                            CountryId = new Guid("42467fd1-a29e-44e4-863c-16b358d7c776"),
                            Name = "Copenhagen"
                        },
                        new
                        {
                            Id = new Guid("54c0c9b4-232d-46c9-afe2-e8c0187b45e1"),
                            CountryId = new Guid("c94790ae-246f-4e88-86cd-35c0fba341b5"),
                            Name = "Lisbon"
                        },
                        new
                        {
                            Id = new Guid("a2a54c02-f5cb-44b8-ac29-c8835a43967c"),
                            CountryId = new Guid("ac2b1f2c-1b00-40ee-a6a7-d1fe4fd8de87"),
                            Name = "Warsaw"
                        },
                        new
                        {
                            Id = new Guid("ffa3b0b7-985d-447b-9937-a17fc293d2bc"),
                            CountryId = new Guid("bfd47464-69b2-4677-966f-1adbe50e6d70"),
                            Name = "Prague"
                        },
                        new
                        {
                            Id = new Guid("a720cf13-173e-4993-ba17-88df1f91354e"),
                            CountryId = new Guid("3f17b554-ca49-47e1-9627-c1f69649ccfd"),
                            Name = "Budapest"
                        },
                        new
                        {
                            Id = new Guid("579b5ce1-78f7-49a6-ae55-e577585aa337"),
                            CountryId = new Guid("b533e272-d1db-42fd-9920-ae9a8d601f19"),
                            Name = "Brussels"
                        },
                        new
                        {
                            Id = new Guid("9bb7c5a2-7047-4728-afec-b81058db8b16"),
                            CountryId = new Guid("a1c6dc73-0ecc-4f4f-9dc4-d5793566dbde"),
                            Name = "Helsinki"
                        });
                });

            modelBuilder.Entity("SmartHome.Data.Entities.CountryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("08bf0948-2545-43ce-bd63-a9ecbbdab857"),
                            Name = "USA"
                        },
                        new
                        {
                            Id = new Guid("78d2f36b-11c2-44fe-8e8d-13040fd15486"),
                            Name = "UK"
                        },
                        new
                        {
                            Id = new Guid("8356d3e9-e0fd-4100-804e-3a4c2b9050ba"),
                            Name = "France"
                        },
                        new
                        {
                            Id = new Guid("ed1d6e52-5f48-42fb-b8a9-98d03da97e54"),
                            Name = "Germany"
                        },
                        new
                        {
                            Id = new Guid("1fcad7a9-ab66-4735-b501-9ef338938b62"),
                            Name = "Japan"
                        },
                        new
                        {
                            Id = new Guid("94f5e989-d24f-4330-9660-c38d42c3330c"),
                            Name = "China"
                        },
                        new
                        {
                            Id = new Guid("3759b8b1-be01-4c23-bf19-59819e4756d9"),
                            Name = "Australia"
                        },
                        new
                        {
                            Id = new Guid("3a17a0c6-8a37-4b57-bb6a-aea88503fa85"),
                            Name = "Canada"
                        },
                        new
                        {
                            Id = new Guid("20e1b203-3527-409e-845e-86559aa65991"),
                            Name = "India"
                        },
                        new
                        {
                            Id = new Guid("1e99d342-9e2c-4a9a-a258-5462104dd390"),
                            Name = "South Africa"
                        },
                        new
                        {
                            Id = new Guid("1ae5dadd-2eeb-4bc6-a75a-4c81061d02d6"),
                            Name = "Brazil"
                        },
                        new
                        {
                            Id = new Guid("f0dfa8b7-5dbe-47f0-9d37-f510d3b529c6"),
                            Name = "Russia"
                        },
                        new
                        {
                            Id = new Guid("8f670858-d3cc-4423-8da0-94f970160682"),
                            Name = "UAE"
                        },
                        new
                        {
                            Id = new Guid("068229ec-aa5d-485a-9d33-55b98476e083"),
                            Name = "Sweden"
                        },
                        new
                        {
                            Id = new Guid("7facfb79-7a17-4d71-9171-bbba8a71b46a"),
                            Name = "South Korea"
                        },
                        new
                        {
                            Id = new Guid("42533db0-1e9f-4a27-b31b-98ebcf658514"),
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = new Guid("95e16d9f-08ce-46aa-9237-f079c91d23f7"),
                            Name = "Netherlands"
                        },
                        new
                        {
                            Id = new Guid("e95f592b-75ef-4897-bc24-cdf3f2db0af7"),
                            Name = "Norway"
                        },
                        new
                        {
                            Id = new Guid("3d706f52-aa83-4e8d-a381-88673b31c70a"),
                            Name = "Vietnam"
                        },
                        new
                        {
                            Id = new Guid("07923a07-bbc9-4430-bca7-4fa8ab4d285a"),
                            Name = "Thailand"
                        },
                        new
                        {
                            Id = new Guid("e8cc6ced-11d9-46cc-a20e-ec8d658db44c"),
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = new Guid("f0518549-cee4-4d9d-9e6a-3b34599cba20"),
                            Name = "Argentina"
                        },
                        new
                        {
                            Id = new Guid("202698fc-481f-47f5-84c3-ad91fa4cce03"),
                            Name = "Italy"
                        },
                        new
                        {
                            Id = new Guid("da089639-ea5f-492b-9031-a79b8fbde6cd"),
                            Name = "Egypt"
                        },
                        new
                        {
                            Id = new Guid("e4c81ecb-e5c4-4741-b398-bb4566955811"),
                            Name = "Nigeria"
                        },
                        new
                        {
                            Id = new Guid("db7e1306-e1b7-45be-a555-9d7c9788da0f"),
                            Name = "New Zealand"
                        },
                        new
                        {
                            Id = new Guid("a6d94df4-d368-4f28-ae27-ee42d209cc09"),
                            Name = "Kenya"
                        },
                        new
                        {
                            Id = new Guid("6f002df8-0c8a-41f9-b66a-3699ddbeb029"),
                            Name = "Spain"
                        },
                        new
                        {
                            Id = new Guid("9d8deb01-2585-4961-ab6c-7354f89886e4"),
                            Name = "Greece"
                        },
                        new
                        {
                            Id = new Guid("a82348c0-569f-4fef-a8ff-fc3466fa2142"),
                            Name = "Ireland"
                        },
                        new
                        {
                            Id = new Guid("03c5c85e-3d36-4ae9-8ffa-0ceca960375d"),
                            Name = "Switzerland"
                        },
                        new
                        {
                            Id = new Guid("3da287b6-be7a-4447-9580-2ee45c711b37"),
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = new Guid("8a0ff199-2053-4eb2-a86b-9cdde7e9dea8"),
                            Name = "Austria"
                        },
                        new
                        {
                            Id = new Guid("42467fd1-a29e-44e4-863c-16b358d7c776"),
                            Name = "Denmark"
                        },
                        new
                        {
                            Id = new Guid("c94790ae-246f-4e88-86cd-35c0fba341b5"),
                            Name = "Portugal"
                        },
                        new
                        {
                            Id = new Guid("ac2b1f2c-1b00-40ee-a6a7-d1fe4fd8de87"),
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("bfd47464-69b2-4677-966f-1adbe50e6d70"),
                            Name = "Czech Republic"
                        },
                        new
                        {
                            Id = new Guid("3f17b554-ca49-47e1-9627-c1f69649ccfd"),
                            Name = "Hungary"
                        },
                        new
                        {
                            Id = new Guid("b533e272-d1db-42fd-9920-ae9a8d601f19"),
                            Name = "Belgium"
                        },
                        new
                        {
                            Id = new Guid("a1c6dc73-0ecc-4f4f-9dc4-d5793566dbde"),
                            Name = "Finland"
                        });
                });

            modelBuilder.Entity("SmartHome.Data.Entities.PropertyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("AreaSquareMeters")
                        .HasColumnType("double precision");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("NumberOfFloors")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Connection")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DeviceStatus")
                        .HasColumnType("integer");

                    b.Property<int>("DeviceType")
                        .HasColumnType("integer");

                    b.Property<float>("EnergySpending")
                        .HasColumnType("real");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PowerSupply")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SmartDevices");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SolarPanelEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("Efficiency")
                        .HasColumnType("real");

                    b.Property<float>("Size")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("SolarPanels");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SprinkleModeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ModeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SprinkleModes");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.WashingMachineModeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ModeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("WashingMachineEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WashingMachineEntityId");

                    b.ToTable("WashingMachineModes");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.AirConditionerEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<float>("CurrentTemperature")
                        .HasColumnType("real");

                    b.Property<float>("MaximumTemperature")
                        .HasColumnType("real");

                    b.Property<float>("MinimumTemperature")
                        .HasColumnType("real");

                    b.Property<int>("Mode")
                        .HasColumnType("integer");

                    b.ToTable("AirConditioners", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.CarChargerEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<float>("ChargingPower")
                        .HasColumnType("real");

                    b.Property<int>("ConnectorNumber")
                        .HasColumnType("integer");

                    b.ToTable("CarChargers", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.CarGateEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Mode")
                        .HasColumnType("integer");

                    b.Property<bool>("isCarClose")
                        .HasColumnType("boolean");

                    b.ToTable("CarGates", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.EnvironmentalConditionsSensorEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<float>("AirHumidity")
                        .HasColumnType("real");

                    b.Property<float>("RoomTemperature")
                        .HasColumnType("real");

                    b.ToTable("EnvironmentalConditionsSensors", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.HomeBatteryEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<float>("BatteryLevel")
                        .HasColumnType("real");

                    b.Property<float>("BatterySize")
                        .HasColumnType("real");

                    b.ToTable("HomeBatteries", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.LampEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<float>("CurrentLight")
                        .HasColumnType("real");

                    b.ToTable("Lamps", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SolarPanelSystemEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.ToTable("SolarPanelSystems", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SprinklerEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<Guid>("ModeId")
                        .HasColumnType("uuid");

                    b.HasIndex("ModeId");

                    b.ToTable("Sprinklers", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.WashingMachineEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<Guid>("CurrentModeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasIndex("CurrentModeId");

                    b.ToTable("WashingMachines", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.CityEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.CountryEntity", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.PropertyEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.CityEntity", "City")
                        .WithMany("Properties")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.WashingMachineModeEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.WashingMachineEntity", null)
                        .WithMany("Modes")
                        .HasForeignKey("WashingMachineEntityId");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.AirConditionerEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.AirConditionerEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.CarChargerEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.CarChargerEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.CarGateEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.CarGateEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.EnvironmentalConditionsSensorEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.EnvironmentalConditionsSensorEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.HomeBatteryEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.HomeBatteryEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.LampEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.LampEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SolarPanelSystemEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.SolarPanelSystemEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SprinklerEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.SprinklerEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SprinkleModeEntity", "Mode")
                        .WithMany()
                        .HasForeignKey("ModeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mode");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.WashingMachineEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.WashingMachineModeEntity", "CurrentMode")
                        .WithMany()
                        .HasForeignKey("CurrentModeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.WashingMachineEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentMode");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.CityEntity", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.CountryEntity", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.WashingMachineEntity", b =>
                {
                    b.Navigation("Modes");
                });
#pragma warning restore 612, 618
        }
    }
}
