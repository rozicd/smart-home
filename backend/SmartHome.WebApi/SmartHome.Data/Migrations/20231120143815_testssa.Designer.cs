// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SmartHome.Data;

#nullable disable

namespace SmartHome.Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20231120143815_testssa")]
    partial class testssa
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SmartHome.Data.Entities.ActivationTokenEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("expires")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("ActivationTokens");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.CityEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("534f124b-dc77-4101-b273-13d07bd7e223"),
                            CountryId = new Guid("7791361d-c0bd-4dab-9d3f-962d278acdc7"),
                            Name = "New York"
                        },
                        new
                        {
                            Id = new Guid("ae327a0b-3d04-410b-82cf-06ba2f065a79"),
                            CountryId = new Guid("7791361d-c0bd-4dab-9d3f-962d278acdc7"),
                            Name = "Los Angeles"
                        },
                        new
                        {
                            Id = new Guid("fb1b4382-bfd4-4637-a09f-9e869525e03c"),
                            CountryId = new Guid("7791361d-c0bd-4dab-9d3f-962d278acdc7"),
                            Name = "Chicago"
                        },
                        new
                        {
                            Id = new Guid("12bd4cad-5597-47db-8669-56e2721e0598"),
                            CountryId = new Guid("fd2a665b-c430-4ada-b1d1-84557a5834e8"),
                            Name = "London"
                        },
                        new
                        {
                            Id = new Guid("bd9283f1-4b98-4e31-8c0a-c0b24431cdb9"),
                            CountryId = new Guid("cf3a9b4d-19b0-483b-a83b-c800fa0d5358"),
                            Name = "Paris"
                        },
                        new
                        {
                            Id = new Guid("8ec789cb-1962-41c7-912a-d5808723d1b9"),
                            CountryId = new Guid("450ddb2e-566a-412c-b988-0fc5f0eb01aa"),
                            Name = "Berlin"
                        },
                        new
                        {
                            Id = new Guid("14edcf05-2273-4067-b387-1f9d3dd1a287"),
                            CountryId = new Guid("4ee5eb35-15d3-4a69-85fd-c2db6ecce2be"),
                            Name = "Tokyo"
                        },
                        new
                        {
                            Id = new Guid("fc2d2b95-b957-43f5-99a6-e9c116eaef08"),
                            CountryId = new Guid("064a3237-2b05-40b5-b696-9b497dfe4acc"),
                            Name = "Beijing"
                        },
                        new
                        {
                            Id = new Guid("caaff8b5-a706-4f5a-a830-d483b20d6d74"),
                            CountryId = new Guid("6c298608-1e4a-4b5f-bc8e-3dd5d19c82f1"),
                            Name = "Sydney"
                        },
                        new
                        {
                            Id = new Guid("8ee3096a-ee2b-4852-ac73-25a16ba8b388"),
                            CountryId = new Guid("63564ade-33f0-4faf-9963-32d15df2e8fd"),
                            Name = "Toronto"
                        },
                        new
                        {
                            Id = new Guid("1c1f5882-aa04-4a06-9af3-2f6af2b326d8"),
                            CountryId = new Guid("a42795f8-bcf4-476d-9a8d-eda11a8d9602"),
                            Name = "Mumbai"
                        },
                        new
                        {
                            Id = new Guid("8ef4cc37-4c92-4f72-a787-1c1eb862e744"),
                            CountryId = new Guid("10003451-8e11-49e3-b143-bb8ee599d295"),
                            Name = "Cape Town"
                        },
                        new
                        {
                            Id = new Guid("a0e2193d-1362-44aa-814b-989f76278fb7"),
                            CountryId = new Guid("57d9895b-e086-4a94-896c-d040c4f682ee"),
                            Name = "Rio de Janeiro"
                        },
                        new
                        {
                            Id = new Guid("5f71a7d9-1b5b-4eb1-a07e-3bd7c9f8dcd4"),
                            CountryId = new Guid("4abbfd58-05b7-4af0-8438-46ca410c6211"),
                            Name = "Moscow"
                        },
                        new
                        {
                            Id = new Guid("cffb2f6f-45b3-42ec-a8a8-5d245a1c52c6"),
                            CountryId = new Guid("8be17a3c-3d25-418e-8857-653f0c19c5a6"),
                            Name = "Dubai"
                        },
                        new
                        {
                            Id = new Guid("7cce40da-beac-4bfd-9cb2-1a4c35eb9126"),
                            CountryId = new Guid("be255399-b7b3-4345-bccd-1faf0cefabeb"),
                            Name = "Stockholm"
                        },
                        new
                        {
                            Id = new Guid("11d9d278-978e-4552-b7eb-afbb6c7ced30"),
                            CountryId = new Guid("a6797f1a-a39b-4633-a217-c62fe290f678"),
                            Name = "Seoul"
                        },
                        new
                        {
                            Id = new Guid("38f8ea2f-45bc-45df-82f9-9cfc151f4e28"),
                            CountryId = new Guid("a17812b0-099b-48fc-b290-2660219c0c07"),
                            Name = "Mexico City"
                        },
                        new
                        {
                            Id = new Guid("11ffdeec-ef09-4b99-a2f3-99e0769b8904"),
                            CountryId = new Guid("b760b265-a68a-4ba9-8bbd-63ab733919a2"),
                            Name = "Amsterdam"
                        },
                        new
                        {
                            Id = new Guid("1a46e2a3-a19b-439b-9b8e-8fb86283db55"),
                            CountryId = new Guid("bd0e7831-5a6c-4216-84ca-c84d92fe03cf"),
                            Name = "Oslo"
                        },
                        new
                        {
                            Id = new Guid("ce6905f1-364f-4db9-9fff-4670942d66af"),
                            CountryId = new Guid("63e19cb3-1d79-4f9d-be4a-9cb0ed6f60d6"),
                            Name = "Hanoi"
                        },
                        new
                        {
                            Id = new Guid("424a1865-aef1-4dea-83da-b42ee87154af"),
                            CountryId = new Guid("80698727-0601-4dfe-b700-6d5bcbef390d"),
                            Name = "Bangkok"
                        },
                        new
                        {
                            Id = new Guid("426ec1fd-0bb1-46cf-a44d-a07f5bee8d59"),
                            CountryId = new Guid("55abab68-87d3-4cc6-b77a-22855d3d865f"),
                            Name = "Istanbul"
                        },
                        new
                        {
                            Id = new Guid("a2def989-a428-4599-8279-7133d9e5af8d"),
                            CountryId = new Guid("c545f39c-5bfa-448b-8c9d-c4d89fd949d2"),
                            Name = "Buenos Aires"
                        },
                        new
                        {
                            Id = new Guid("3ed6bdb0-5b99-407c-a4be-e3ff08ad3224"),
                            CountryId = new Guid("aa98b8a2-824f-4012-a4cb-65e9d90c68ed"),
                            Name = "Rome"
                        },
                        new
                        {
                            Id = new Guid("cf42bea0-f7fb-42f0-a39d-21dc50ebcc56"),
                            CountryId = new Guid("0b54ab3a-4f5d-419e-8efa-b4ef6361eccd"),
                            Name = "Cairo"
                        },
                        new
                        {
                            Id = new Guid("97387e92-dd29-4a90-a09c-664658b490af"),
                            CountryId = new Guid("552827b6-ff0c-4d5b-b24f-00bb5e9cf9d4"),
                            Name = "Lagos"
                        },
                        new
                        {
                            Id = new Guid("2f94b2b5-93fe-44bc-93c7-e2b1c85a6910"),
                            CountryId = new Guid("4b6f21f0-ed9d-4901-9d6f-a4d580c7ad1f"),
                            Name = "Auckland"
                        },
                        new
                        {
                            Id = new Guid("e9548adb-f4be-47ff-b5e1-6a555a6127d7"),
                            CountryId = new Guid("acecc64e-677a-4e09-aabe-1e1bce826a39"),
                            Name = "Nairobi"
                        },
                        new
                        {
                            Id = new Guid("29cf46d4-0b37-402b-91fb-b4d92dec2dbc"),
                            CountryId = new Guid("ec3cc6b7-deee-4b02-8f78-3381b95d29db"),
                            Name = "Barcelona"
                        },
                        new
                        {
                            Id = new Guid("991d3ebf-bf2b-4f17-99d4-5b8b48012d6a"),
                            CountryId = new Guid("46de43bc-09ad-4a9a-b00e-20cb6d817f44"),
                            Name = "Athens"
                        },
                        new
                        {
                            Id = new Guid("71831b3a-6fd5-465f-b985-2eaf88fca6de"),
                            CountryId = new Guid("cb92e781-6287-4830-8b84-157ef3bb4f57"),
                            Name = "Dublin"
                        },
                        new
                        {
                            Id = new Guid("3276c3f0-1e32-4236-8505-1e87c6646aba"),
                            CountryId = new Guid("e1ff9a15-50d0-4a72-8acb-29278253c28a"),
                            Name = "Zurich"
                        },
                        new
                        {
                            Id = new Guid("34b513f8-737f-4308-89fd-baf6f664d1a5"),
                            CountryId = new Guid("a4a42d67-f006-4b3e-ae67-51f26bfc5ace"),
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = new Guid("3604c6cc-1e51-44d7-8630-33e231706bdd"),
                            CountryId = new Guid("c403351c-e19e-4b91-bec3-e19ee9a89a19"),
                            Name = "Vienna"
                        },
                        new
                        {
                            Id = new Guid("f2d90bbf-c367-431a-a80a-cbb6a363b136"),
                            CountryId = new Guid("064a3237-2b05-40b5-b696-9b497dfe4acc"),
                            Name = "Hong Kong"
                        },
                        new
                        {
                            Id = new Guid("709addc1-3ea7-4a71-b2bd-0d0f70fdd5a8"),
                            CountryId = new Guid("60a10db0-e176-4543-92da-6d19e07254f1"),
                            Name = "Copenhagen"
                        },
                        new
                        {
                            Id = new Guid("0f705abe-9893-438a-8579-6295582383a1"),
                            CountryId = new Guid("07e012e7-2ce5-4e67-9918-eb2c260b0574"),
                            Name = "Lisbon"
                        },
                        new
                        {
                            Id = new Guid("c5c47ef4-a469-42d5-97ef-83d42aa4c5ba"),
                            CountryId = new Guid("95be32bd-4f09-4c00-877a-8b44d01fb375"),
                            Name = "Warsaw"
                        },
                        new
                        {
                            Id = new Guid("5048dbec-a979-4d4d-8a06-3a0a955111a2"),
                            CountryId = new Guid("0b86cfb4-d2e5-45a5-81c9-63d417bb92a2"),
                            Name = "Prague"
                        },
                        new
                        {
                            Id = new Guid("e2567479-6505-46a1-85d8-e2cdf9bdaf8e"),
                            CountryId = new Guid("bbb33b79-cf55-4498-a210-12383d69bd8c"),
                            Name = "Budapest"
                        },
                        new
                        {
                            Id = new Guid("26ba45fd-d319-4a2e-86c9-5c15d11c5fc4"),
                            CountryId = new Guid("df525916-d626-4e7a-a468-29ab8ba824c1"),
                            Name = "Brussels"
                        },
                        new
                        {
                            Id = new Guid("c2bdaf6b-a068-46c7-99ad-d69e4b972698"),
                            CountryId = new Guid("17b629b5-22ab-4bb5-9b8f-844629262a59"),
                            Name = "Helsinki"
                        });
                });

            modelBuilder.Entity("SmartHome.Data.Entities.CountryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7791361d-c0bd-4dab-9d3f-962d278acdc7"),
                            Name = "USA"
                        },
                        new
                        {
                            Id = new Guid("fd2a665b-c430-4ada-b1d1-84557a5834e8"),
                            Name = "UK"
                        },
                        new
                        {
                            Id = new Guid("cf3a9b4d-19b0-483b-a83b-c800fa0d5358"),
                            Name = "France"
                        },
                        new
                        {
                            Id = new Guid("450ddb2e-566a-412c-b988-0fc5f0eb01aa"),
                            Name = "Germany"
                        },
                        new
                        {
                            Id = new Guid("4ee5eb35-15d3-4a69-85fd-c2db6ecce2be"),
                            Name = "Japan"
                        },
                        new
                        {
                            Id = new Guid("064a3237-2b05-40b5-b696-9b497dfe4acc"),
                            Name = "China"
                        },
                        new
                        {
                            Id = new Guid("6c298608-1e4a-4b5f-bc8e-3dd5d19c82f1"),
                            Name = "Australia"
                        },
                        new
                        {
                            Id = new Guid("63564ade-33f0-4faf-9963-32d15df2e8fd"),
                            Name = "Canada"
                        },
                        new
                        {
                            Id = new Guid("a42795f8-bcf4-476d-9a8d-eda11a8d9602"),
                            Name = "India"
                        },
                        new
                        {
                            Id = new Guid("10003451-8e11-49e3-b143-bb8ee599d295"),
                            Name = "South Africa"
                        },
                        new
                        {
                            Id = new Guid("57d9895b-e086-4a94-896c-d040c4f682ee"),
                            Name = "Brazil"
                        },
                        new
                        {
                            Id = new Guid("4abbfd58-05b7-4af0-8438-46ca410c6211"),
                            Name = "Russia"
                        },
                        new
                        {
                            Id = new Guid("8be17a3c-3d25-418e-8857-653f0c19c5a6"),
                            Name = "UAE"
                        },
                        new
                        {
                            Id = new Guid("be255399-b7b3-4345-bccd-1faf0cefabeb"),
                            Name = "Sweden"
                        },
                        new
                        {
                            Id = new Guid("a6797f1a-a39b-4633-a217-c62fe290f678"),
                            Name = "South Korea"
                        },
                        new
                        {
                            Id = new Guid("a17812b0-099b-48fc-b290-2660219c0c07"),
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = new Guid("b760b265-a68a-4ba9-8bbd-63ab733919a2"),
                            Name = "Netherlands"
                        },
                        new
                        {
                            Id = new Guid("bd0e7831-5a6c-4216-84ca-c84d92fe03cf"),
                            Name = "Norway"
                        },
                        new
                        {
                            Id = new Guid("63e19cb3-1d79-4f9d-be4a-9cb0ed6f60d6"),
                            Name = "Vietnam"
                        },
                        new
                        {
                            Id = new Guid("80698727-0601-4dfe-b700-6d5bcbef390d"),
                            Name = "Thailand"
                        },
                        new
                        {
                            Id = new Guid("55abab68-87d3-4cc6-b77a-22855d3d865f"),
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = new Guid("c545f39c-5bfa-448b-8c9d-c4d89fd949d2"),
                            Name = "Argentina"
                        },
                        new
                        {
                            Id = new Guid("aa98b8a2-824f-4012-a4cb-65e9d90c68ed"),
                            Name = "Italy"
                        },
                        new
                        {
                            Id = new Guid("0b54ab3a-4f5d-419e-8efa-b4ef6361eccd"),
                            Name = "Egypt"
                        },
                        new
                        {
                            Id = new Guid("552827b6-ff0c-4d5b-b24f-00bb5e9cf9d4"),
                            Name = "Nigeria"
                        },
                        new
                        {
                            Id = new Guid("4b6f21f0-ed9d-4901-9d6f-a4d580c7ad1f"),
                            Name = "New Zealand"
                        },
                        new
                        {
                            Id = new Guid("acecc64e-677a-4e09-aabe-1e1bce826a39"),
                            Name = "Kenya"
                        },
                        new
                        {
                            Id = new Guid("ec3cc6b7-deee-4b02-8f78-3381b95d29db"),
                            Name = "Spain"
                        },
                        new
                        {
                            Id = new Guid("46de43bc-09ad-4a9a-b00e-20cb6d817f44"),
                            Name = "Greece"
                        },
                        new
                        {
                            Id = new Guid("cb92e781-6287-4830-8b84-157ef3bb4f57"),
                            Name = "Ireland"
                        },
                        new
                        {
                            Id = new Guid("e1ff9a15-50d0-4a72-8acb-29278253c28a"),
                            Name = "Switzerland"
                        },
                        new
                        {
                            Id = new Guid("a4a42d67-f006-4b3e-ae67-51f26bfc5ace"),
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = new Guid("c403351c-e19e-4b91-bec3-e19ee9a89a19"),
                            Name = "Austria"
                        },
                        new
                        {
                            Id = new Guid("60a10db0-e176-4543-92da-6d19e07254f1"),
                            Name = "Denmark"
                        },
                        new
                        {
                            Id = new Guid("07e012e7-2ce5-4e67-9918-eb2c260b0574"),
                            Name = "Portugal"
                        },
                        new
                        {
                            Id = new Guid("95be32bd-4f09-4c00-877a-8b44d01fb375"),
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("0b86cfb4-d2e5-45a5-81c9-63d417bb92a2"),
                            Name = "Czech Republic"
                        },
                        new
                        {
                            Id = new Guid("bbb33b79-cf55-4498-a210-12383d69bd8c"),
                            Name = "Hungary"
                        },
                        new
                        {
                            Id = new Guid("df525916-d626-4e7a-a468-29ab8ba824c1"),
                            Name = "Belgium"
                        },
                        new
                        {
                            Id = new Guid("17b629b5-22ab-4bb5-9b8f-844629262a59"),
                            Name = "Finland"
                        });
                });

            modelBuilder.Entity("SmartHome.Data.Entities.PropertyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("AreaSquareMeters")
                        .HasColumnType("double precision");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("NumberOfFloors")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Connection")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DeviceStatus")
                        .HasColumnType("integer");

                    b.Property<int>("DeviceType")
                        .HasColumnType("integer");

                    b.Property<float>("EnergySpending")
                        .HasColumnType("real");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PowerSupply")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SmartDevices");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SolarPanelEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("Efficiency")
                        .HasColumnType("real");

                    b.Property<float>("Size")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("SolarPanels");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SprinkleModeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("SprinkleModes");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.WashingMachineModeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WashingMachineEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WashingMachineEntityId");

                    b.ToTable("WashingMachineModes");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.AirConditionerEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<float>("CurrentTemperature")
                        .HasColumnType("real");

                    b.Property<float>("MaximumTemperature")
                        .HasColumnType("real");

                    b.Property<float>("MinimumTemperature")
                        .HasColumnType("real");

                    b.Property<int>("Mode")
                        .HasColumnType("integer");

                    b.ToTable("AirConditioners", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.CarChargerEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<float>("ChargingPower")
                        .HasColumnType("real");

                    b.Property<int>("ConnectorNumber")
                        .HasColumnType("integer");

                    b.ToTable("CarChargers", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.CarGateEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Mode")
                        .HasColumnType("integer");

                    b.Property<bool>("isCarClose")
                        .HasColumnType("boolean");

                    b.ToTable("CarGates", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.EnvironmentalConditionsSensorEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<float>("AirHumidity")
                        .HasColumnType("real");

                    b.Property<float>("RoomTemperature")
                        .HasColumnType("real");

                    b.ToTable("EnvironmentalConditionsSensors", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.HomeBatteryEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<float>("BatteryLevel")
                        .HasColumnType("real");

                    b.Property<float>("BatterySize")
                        .HasColumnType("real");

                    b.ToTable("HomeBatteries", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.LampEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<float>("CurrentLight")
                        .HasColumnType("real");

                    b.ToTable("Lamps", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SolarPanelSystemEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.ToTable("SolarPanelSystems", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SprinklerEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<Guid>("ModeId")
                        .HasColumnType("uuid");

                    b.HasIndex("ModeId");

                    b.ToTable("Sprinklers", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.WashingMachineEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<Guid>("CurrentModeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasIndex("CurrentModeId");

                    b.ToTable("WashingMachines", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.CityEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.CountryEntity", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.PropertyEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.CityEntity", "City")
                        .WithMany("Properties")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.WashingMachineModeEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.WashingMachineEntity", null)
                        .WithMany("Modes")
                        .HasForeignKey("WashingMachineEntityId");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.AirConditionerEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.AirConditionerEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.CarChargerEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.CarChargerEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.CarGateEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.CarGateEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.EnvironmentalConditionsSensorEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.EnvironmentalConditionsSensorEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.HomeBatteryEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.HomeBatteryEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.LampEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.LampEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SolarPanelSystemEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.SolarPanelSystemEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SprinklerEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.SprinklerEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SprinkleModeEntity", "Mode")
                        .WithMany()
                        .HasForeignKey("ModeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mode");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.WashingMachineEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.WashingMachineModeEntity", "CurrentMode")
                        .WithMany()
                        .HasForeignKey("CurrentModeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.WashingMachineEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentMode");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.CityEntity", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.CountryEntity", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.WashingMachineEntity", b =>
                {
                    b.Navigation("Modes");
                });
#pragma warning restore 612, 618
        }
    }
}
