// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SmartHome.Data;

#nullable disable

namespace SmartHome.Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20231120160043_testssaasa")]
    partial class testssaasa
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SmartHome.Data.Entities.ActivationTokenEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("expires")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("ActivationTokens");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.CityEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f71b9aa2-2ccb-44ce-8352-ef436b260ac4"),
                            CountryId = new Guid("13716c3c-f4c3-4b78-96c0-048ddfce615a"),
                            Name = "New York"
                        },
                        new
                        {
                            Id = new Guid("6b11a826-23d2-4aaa-b5e5-9cd2ad7aa8ce"),
                            CountryId = new Guid("13716c3c-f4c3-4b78-96c0-048ddfce615a"),
                            Name = "Los Angeles"
                        },
                        new
                        {
                            Id = new Guid("261449ba-5033-423e-891a-5db5928446fa"),
                            CountryId = new Guid("13716c3c-f4c3-4b78-96c0-048ddfce615a"),
                            Name = "Chicago"
                        },
                        new
                        {
                            Id = new Guid("c047b8dd-252b-4f49-b53b-97a2bf8711f7"),
                            CountryId = new Guid("8e0a5183-f8e9-47f8-a45c-d0f1aa53e32b"),
                            Name = "London"
                        },
                        new
                        {
                            Id = new Guid("abfdef4b-7c38-4583-9857-b87b559bf27e"),
                            CountryId = new Guid("5194a043-65a4-49d7-9fd2-e868fbaa3aa9"),
                            Name = "Paris"
                        },
                        new
                        {
                            Id = new Guid("ffc365a3-fde3-4db0-b262-59c9fff597a2"),
                            CountryId = new Guid("939bfd4d-780f-40a5-a479-3a9f8e2ef345"),
                            Name = "Berlin"
                        },
                        new
                        {
                            Id = new Guid("308cc1d7-4105-4a8f-ad39-7c01b1f83b8d"),
                            CountryId = new Guid("1111aaa6-556e-454a-9c2f-d983ecb62f3e"),
                            Name = "Tokyo"
                        },
                        new
                        {
                            Id = new Guid("63139d34-b4fa-44fa-a20f-a60f6a72d374"),
                            CountryId = new Guid("eed7cba4-561d-42de-9798-1b93bfb7318e"),
                            Name = "Beijing"
                        },
                        new
                        {
                            Id = new Guid("02c8fcc9-fe2f-4142-9ed1-c811eeaaa5e6"),
                            CountryId = new Guid("d766a17c-11b1-4471-97c9-fdcb8b298c9f"),
                            Name = "Sydney"
                        },
                        new
                        {
                            Id = new Guid("d41dd90a-3e2a-49c8-bc0e-70985c3c2318"),
                            CountryId = new Guid("3a77dfb6-ff73-4498-a5e1-4c0be13a9db9"),
                            Name = "Toronto"
                        },
                        new
                        {
                            Id = new Guid("77188360-6fa2-48a1-83fb-9802d707a101"),
                            CountryId = new Guid("08beb3ff-ea89-4e81-a0f4-d8eb638a8860"),
                            Name = "Mumbai"
                        },
                        new
                        {
                            Id = new Guid("d293540b-afd4-42da-9c16-1f0d8f3f37e3"),
                            CountryId = new Guid("c1517d4a-d37e-4427-949b-1540b4d4ef13"),
                            Name = "Cape Town"
                        },
                        new
                        {
                            Id = new Guid("4bc1b3e7-fba3-44b6-83bc-af9963e29039"),
                            CountryId = new Guid("649953f2-f93a-403c-b78a-097a5a192289"),
                            Name = "Rio de Janeiro"
                        },
                        new
                        {
                            Id = new Guid("cb394446-2801-483a-9a92-77f4f0c04b3b"),
                            CountryId = new Guid("933fd123-6113-418d-91dc-0f036d656290"),
                            Name = "Moscow"
                        },
                        new
                        {
                            Id = new Guid("944e387d-c3c1-437d-939b-27e4e70d301b"),
                            CountryId = new Guid("feb42961-64a2-4993-938b-38ae036ee56c"),
                            Name = "Dubai"
                        },
                        new
                        {
                            Id = new Guid("26955b6e-56cf-49a7-9e45-7031e717a596"),
                            CountryId = new Guid("b7156ebb-2452-4cba-b745-4effdd8d897f"),
                            Name = "Stockholm"
                        },
                        new
                        {
                            Id = new Guid("9732cf5f-8868-42a8-9fd3-fa3a80063e6e"),
                            CountryId = new Guid("c43f3800-6c59-4c5b-8be1-81670f273f18"),
                            Name = "Seoul"
                        },
                        new
                        {
                            Id = new Guid("b8d04243-366e-4625-a591-208d9be41b70"),
                            CountryId = new Guid("bff05973-6fd7-4565-94bc-f0c00040c4b1"),
                            Name = "Mexico City"
                        },
                        new
                        {
                            Id = new Guid("0589a4d7-845e-465c-8c68-9708564acc71"),
                            CountryId = new Guid("497894c7-7d84-4bdf-83dd-da37181f3bbf"),
                            Name = "Amsterdam"
                        },
                        new
                        {
                            Id = new Guid("959377aa-1ded-46a5-9d53-af5fb604921f"),
                            CountryId = new Guid("2a0613cd-5380-41be-b431-4eecac68dfd5"),
                            Name = "Oslo"
                        },
                        new
                        {
                            Id = new Guid("dccb1c84-502b-48af-86c7-4b1fa9f0d4f4"),
                            CountryId = new Guid("49a04141-b07c-4deb-a862-8b5f254e503e"),
                            Name = "Hanoi"
                        },
                        new
                        {
                            Id = new Guid("571bb5e6-b11c-47f3-a9ca-95d9a1b568e7"),
                            CountryId = new Guid("c1edb356-231a-42f8-af75-783259de18e4"),
                            Name = "Bangkok"
                        },
                        new
                        {
                            Id = new Guid("db2a6d31-6b0f-4b36-99d2-770822e1ed9e"),
                            CountryId = new Guid("1e4e3833-1729-4c27-9a8b-45b9e8b46e5d"),
                            Name = "Istanbul"
                        },
                        new
                        {
                            Id = new Guid("553618a1-d410-4f51-89f6-237a0624128a"),
                            CountryId = new Guid("72efab69-2c7b-482b-974e-10578106a089"),
                            Name = "Buenos Aires"
                        },
                        new
                        {
                            Id = new Guid("0770e78c-53d0-4e5c-bf9f-6e3c182fdd03"),
                            CountryId = new Guid("5cef1a83-df35-4fbd-873f-966c106b4441"),
                            Name = "Rome"
                        },
                        new
                        {
                            Id = new Guid("33a68431-f6b6-4ddd-9a3e-034b15684e40"),
                            CountryId = new Guid("df8b6d2e-c6a2-45b7-b319-5921859d900a"),
                            Name = "Cairo"
                        },
                        new
                        {
                            Id = new Guid("bc95bc4c-4bf6-492c-9632-42bd6c08d454"),
                            CountryId = new Guid("d630c4af-9b5f-460b-a2f0-5caee4bc084b"),
                            Name = "Lagos"
                        },
                        new
                        {
                            Id = new Guid("048c40fb-e689-41cd-8698-0fd79a0277ec"),
                            CountryId = new Guid("7bd2231a-48a4-488f-b99d-2490eb05c6b0"),
                            Name = "Auckland"
                        },
                        new
                        {
                            Id = new Guid("f22a2c1e-42e8-47d5-98be-5073a504cb3d"),
                            CountryId = new Guid("c428c298-1d27-41ef-b58f-7b35980346a1"),
                            Name = "Nairobi"
                        },
                        new
                        {
                            Id = new Guid("0a640d11-c721-4e6f-9096-1fe6fb181fec"),
                            CountryId = new Guid("584aa65d-b8a6-4e57-aeee-8ef8ab9c5805"),
                            Name = "Barcelona"
                        },
                        new
                        {
                            Id = new Guid("feab2395-0966-4fc4-a96c-e4c50c32a3db"),
                            CountryId = new Guid("29ee7af6-9cd4-42eb-be13-ebe2d686788a"),
                            Name = "Athens"
                        },
                        new
                        {
                            Id = new Guid("c4adb8c9-b008-444c-9c4f-c7c2eb6f7917"),
                            CountryId = new Guid("2e9c552c-308b-4fc0-933d-7fb5c26cd6ef"),
                            Name = "Dublin"
                        },
                        new
                        {
                            Id = new Guid("b7facaf4-dbc3-49b2-9335-239005fa7a9b"),
                            CountryId = new Guid("94460da3-3510-4139-98fd-27f983217742"),
                            Name = "Zurich"
                        },
                        new
                        {
                            Id = new Guid("b55de13a-9150-4fd6-b2ec-d3509183e60e"),
                            CountryId = new Guid("a7446207-0e7f-460d-a6af-79b276ae70fa"),
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = new Guid("bd36de93-0c8e-421a-a9cb-c8bcdb10ccc6"),
                            CountryId = new Guid("8de1345e-6385-4a14-8896-4df827560fb8"),
                            Name = "Vienna"
                        },
                        new
                        {
                            Id = new Guid("5e7cf8ea-099f-4109-b354-0042b245fbb7"),
                            CountryId = new Guid("eed7cba4-561d-42de-9798-1b93bfb7318e"),
                            Name = "Hong Kong"
                        },
                        new
                        {
                            Id = new Guid("e326c1c0-bad1-4e0c-9731-9b0b9c621ae7"),
                            CountryId = new Guid("0cb3d793-f325-46dd-958d-8ba2e02fa7a3"),
                            Name = "Copenhagen"
                        },
                        new
                        {
                            Id = new Guid("80c3b4d7-0155-4706-a614-604559257c08"),
                            CountryId = new Guid("505e6786-947c-4e43-8f1c-748466f5393d"),
                            Name = "Lisbon"
                        },
                        new
                        {
                            Id = new Guid("c715aa96-a179-4ad6-9b12-9fb3876ae826"),
                            CountryId = new Guid("02b9ad19-af00-45da-872e-3aa9d6ed987c"),
                            Name = "Warsaw"
                        },
                        new
                        {
                            Id = new Guid("0e86a01d-fdff-45ad-92d6-b04be9c58c76"),
                            CountryId = new Guid("c234b0d0-ef70-455c-87ff-d0fb52d82c03"),
                            Name = "Prague"
                        },
                        new
                        {
                            Id = new Guid("928f54cb-1438-41dc-87a8-01f72bb2178d"),
                            CountryId = new Guid("4cd527d8-0483-4aa2-b318-723d8a8e96e7"),
                            Name = "Budapest"
                        },
                        new
                        {
                            Id = new Guid("ae95cd84-5e0c-4f70-bbc8-1626ed9c6ca9"),
                            CountryId = new Guid("2e32c56e-e024-4357-a9e5-cb5ec87d934a"),
                            Name = "Brussels"
                        },
                        new
                        {
                            Id = new Guid("29f043fe-c7c1-4391-aeb7-d0ae01631dbb"),
                            CountryId = new Guid("c0672983-d2bc-4e36-b13f-83d209ab892a"),
                            Name = "Helsinki"
                        });
                });

            modelBuilder.Entity("SmartHome.Data.Entities.CountryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("13716c3c-f4c3-4b78-96c0-048ddfce615a"),
                            Name = "USA"
                        },
                        new
                        {
                            Id = new Guid("8e0a5183-f8e9-47f8-a45c-d0f1aa53e32b"),
                            Name = "UK"
                        },
                        new
                        {
                            Id = new Guid("5194a043-65a4-49d7-9fd2-e868fbaa3aa9"),
                            Name = "France"
                        },
                        new
                        {
                            Id = new Guid("939bfd4d-780f-40a5-a479-3a9f8e2ef345"),
                            Name = "Germany"
                        },
                        new
                        {
                            Id = new Guid("1111aaa6-556e-454a-9c2f-d983ecb62f3e"),
                            Name = "Japan"
                        },
                        new
                        {
                            Id = new Guid("eed7cba4-561d-42de-9798-1b93bfb7318e"),
                            Name = "China"
                        },
                        new
                        {
                            Id = new Guid("d766a17c-11b1-4471-97c9-fdcb8b298c9f"),
                            Name = "Australia"
                        },
                        new
                        {
                            Id = new Guid("3a77dfb6-ff73-4498-a5e1-4c0be13a9db9"),
                            Name = "Canada"
                        },
                        new
                        {
                            Id = new Guid("08beb3ff-ea89-4e81-a0f4-d8eb638a8860"),
                            Name = "India"
                        },
                        new
                        {
                            Id = new Guid("c1517d4a-d37e-4427-949b-1540b4d4ef13"),
                            Name = "South Africa"
                        },
                        new
                        {
                            Id = new Guid("649953f2-f93a-403c-b78a-097a5a192289"),
                            Name = "Brazil"
                        },
                        new
                        {
                            Id = new Guid("933fd123-6113-418d-91dc-0f036d656290"),
                            Name = "Russia"
                        },
                        new
                        {
                            Id = new Guid("feb42961-64a2-4993-938b-38ae036ee56c"),
                            Name = "UAE"
                        },
                        new
                        {
                            Id = new Guid("b7156ebb-2452-4cba-b745-4effdd8d897f"),
                            Name = "Sweden"
                        },
                        new
                        {
                            Id = new Guid("c43f3800-6c59-4c5b-8be1-81670f273f18"),
                            Name = "South Korea"
                        },
                        new
                        {
                            Id = new Guid("bff05973-6fd7-4565-94bc-f0c00040c4b1"),
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = new Guid("497894c7-7d84-4bdf-83dd-da37181f3bbf"),
                            Name = "Netherlands"
                        },
                        new
                        {
                            Id = new Guid("2a0613cd-5380-41be-b431-4eecac68dfd5"),
                            Name = "Norway"
                        },
                        new
                        {
                            Id = new Guid("49a04141-b07c-4deb-a862-8b5f254e503e"),
                            Name = "Vietnam"
                        },
                        new
                        {
                            Id = new Guid("c1edb356-231a-42f8-af75-783259de18e4"),
                            Name = "Thailand"
                        },
                        new
                        {
                            Id = new Guid("1e4e3833-1729-4c27-9a8b-45b9e8b46e5d"),
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = new Guid("72efab69-2c7b-482b-974e-10578106a089"),
                            Name = "Argentina"
                        },
                        new
                        {
                            Id = new Guid("5cef1a83-df35-4fbd-873f-966c106b4441"),
                            Name = "Italy"
                        },
                        new
                        {
                            Id = new Guid("df8b6d2e-c6a2-45b7-b319-5921859d900a"),
                            Name = "Egypt"
                        },
                        new
                        {
                            Id = new Guid("d630c4af-9b5f-460b-a2f0-5caee4bc084b"),
                            Name = "Nigeria"
                        },
                        new
                        {
                            Id = new Guid("7bd2231a-48a4-488f-b99d-2490eb05c6b0"),
                            Name = "New Zealand"
                        },
                        new
                        {
                            Id = new Guid("c428c298-1d27-41ef-b58f-7b35980346a1"),
                            Name = "Kenya"
                        },
                        new
                        {
                            Id = new Guid("584aa65d-b8a6-4e57-aeee-8ef8ab9c5805"),
                            Name = "Spain"
                        },
                        new
                        {
                            Id = new Guid("29ee7af6-9cd4-42eb-be13-ebe2d686788a"),
                            Name = "Greece"
                        },
                        new
                        {
                            Id = new Guid("2e9c552c-308b-4fc0-933d-7fb5c26cd6ef"),
                            Name = "Ireland"
                        },
                        new
                        {
                            Id = new Guid("94460da3-3510-4139-98fd-27f983217742"),
                            Name = "Switzerland"
                        },
                        new
                        {
                            Id = new Guid("a7446207-0e7f-460d-a6af-79b276ae70fa"),
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = new Guid("8de1345e-6385-4a14-8896-4df827560fb8"),
                            Name = "Austria"
                        },
                        new
                        {
                            Id = new Guid("0cb3d793-f325-46dd-958d-8ba2e02fa7a3"),
                            Name = "Denmark"
                        },
                        new
                        {
                            Id = new Guid("505e6786-947c-4e43-8f1c-748466f5393d"),
                            Name = "Portugal"
                        },
                        new
                        {
                            Id = new Guid("02b9ad19-af00-45da-872e-3aa9d6ed987c"),
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("c234b0d0-ef70-455c-87ff-d0fb52d82c03"),
                            Name = "Czech Republic"
                        },
                        new
                        {
                            Id = new Guid("4cd527d8-0483-4aa2-b318-723d8a8e96e7"),
                            Name = "Hungary"
                        },
                        new
                        {
                            Id = new Guid("2e32c56e-e024-4357-a9e5-cb5ec87d934a"),
                            Name = "Belgium"
                        },
                        new
                        {
                            Id = new Guid("c0672983-d2bc-4e36-b13f-83d209ab892a"),
                            Name = "Finland"
                        });
                });

            modelBuilder.Entity("SmartHome.Data.Entities.PropertyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("AreaSquareMeters")
                        .HasColumnType("double precision");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("NumberOfFloors")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Connection")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DeviceStatus")
                        .HasColumnType("integer");

                    b.Property<int>("DeviceType")
                        .HasColumnType("integer");

                    b.Property<float>("EnergySpending")
                        .HasColumnType("real");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PowerSupply")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SmartDevices");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SolarPanelEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("Efficiency")
                        .HasColumnType("real");

                    b.Property<float>("Size")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("SolarPanels");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SprinkleModeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ModeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SprinkleModes");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.WashingMachineModeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ModeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("WashingMachineEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WashingMachineEntityId");

                    b.ToTable("WashingMachineModes");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.AirConditionerEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<float>("CurrentTemperature")
                        .HasColumnType("real");

                    b.Property<float>("MaximumTemperature")
                        .HasColumnType("real");

                    b.Property<float>("MinimumTemperature")
                        .HasColumnType("real");

                    b.Property<int>("Mode")
                        .HasColumnType("integer");

                    b.ToTable("AirConditioners", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.CarChargerEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<float>("ChargingPower")
                        .HasColumnType("real");

                    b.Property<int>("ConnectorNumber")
                        .HasColumnType("integer");

                    b.ToTable("CarChargers", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.CarGateEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Mode")
                        .HasColumnType("integer");

                    b.Property<bool>("isCarClose")
                        .HasColumnType("boolean");

                    b.ToTable("CarGates", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.EnvironmentalConditionsSensorEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<float>("AirHumidity")
                        .HasColumnType("real");

                    b.Property<float>("RoomTemperature")
                        .HasColumnType("real");

                    b.ToTable("EnvironmentalConditionsSensors", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.HomeBatteryEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<float>("BatteryLevel")
                        .HasColumnType("real");

                    b.Property<float>("BatterySize")
                        .HasColumnType("real");

                    b.ToTable("HomeBatteries", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.LampEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<float>("CurrentLight")
                        .HasColumnType("real");

                    b.ToTable("Lamps", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SolarPanelSystemEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.ToTable("SolarPanelSystems", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SprinklerEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<Guid>("ModeId")
                        .HasColumnType("uuid");

                    b.HasIndex("ModeId");

                    b.ToTable("Sprinklers", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.WashingMachineEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<Guid?>("CurrentModeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasIndex("CurrentModeId");

                    b.ToTable("WashingMachines", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.CityEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.CountryEntity", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.PropertyEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.CityEntity", "City")
                        .WithMany("Properties")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.WashingMachineModeEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.WashingMachineEntity", null)
                        .WithMany("Modes")
                        .HasForeignKey("WashingMachineEntityId");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.AirConditionerEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.AirConditionerEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.CarChargerEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.CarChargerEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.CarGateEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.CarGateEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.EnvironmentalConditionsSensorEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.EnvironmentalConditionsSensorEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.HomeBatteryEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.HomeBatteryEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.LampEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.LampEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SolarPanelSystemEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.SolarPanelSystemEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SprinklerEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.SprinklerEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SprinkleModeEntity", "Mode")
                        .WithMany()
                        .HasForeignKey("ModeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mode");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.WashingMachineEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.WashingMachineModeEntity", "CurrentMode")
                        .WithMany()
                        .HasForeignKey("CurrentModeId");

                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.WashingMachineEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentMode");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.CityEntity", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.CountryEntity", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.WashingMachineEntity", b =>
                {
                    b.Navigation("Modes");
                });
#pragma warning restore 612, 618
        }
    }
}
