// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SmartHome.Data;

#nullable disable

namespace SmartHome.Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20231120170014_testssaasaaa")]
    partial class testssaasaaa
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SmartHome.Data.Entities.ActivationTokenEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("expires")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("ActivationTokens");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.CityEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("03c15916-73b8-48ea-a02b-5ab3e0a608b2"),
                            CountryId = new Guid("e9c7a64a-e63d-46b5-82fa-691fcee8f3b2"),
                            Name = "New York"
                        },
                        new
                        {
                            Id = new Guid("e857d95f-860a-4bc7-b9b0-9dbd6476ff1c"),
                            CountryId = new Guid("e9c7a64a-e63d-46b5-82fa-691fcee8f3b2"),
                            Name = "Los Angeles"
                        },
                        new
                        {
                            Id = new Guid("b77ff584-b5e5-4835-aeaa-5619a029c7dc"),
                            CountryId = new Guid("e9c7a64a-e63d-46b5-82fa-691fcee8f3b2"),
                            Name = "Chicago"
                        },
                        new
                        {
                            Id = new Guid("c14deae5-961e-41c7-ad55-6538ee594c61"),
                            CountryId = new Guid("c6dbb66f-079f-46eb-9742-676454e4b40f"),
                            Name = "London"
                        },
                        new
                        {
                            Id = new Guid("765702e9-eb65-4543-8588-0c93af377f8e"),
                            CountryId = new Guid("4dac9f7f-58ea-4279-87e4-4f3579a7e8cc"),
                            Name = "Paris"
                        },
                        new
                        {
                            Id = new Guid("72f34771-24d1-46ef-97b4-13431788a7c7"),
                            CountryId = new Guid("f6a2c7ef-2e5c-44dd-a2dc-ac06dbf9fe4a"),
                            Name = "Berlin"
                        },
                        new
                        {
                            Id = new Guid("784f4b2a-dc5f-432c-98c9-974a1d4c27b1"),
                            CountryId = new Guid("875f4325-353d-4ac3-9a85-c3a0be0e5f82"),
                            Name = "Tokyo"
                        },
                        new
                        {
                            Id = new Guid("43f634b3-db71-412e-9da4-89078acf3cce"),
                            CountryId = new Guid("187b6967-3d53-424d-ab30-8a2c5a94db36"),
                            Name = "Beijing"
                        },
                        new
                        {
                            Id = new Guid("278dc939-3a57-48be-945f-de9cad14a593"),
                            CountryId = new Guid("b88df85f-0338-4196-8c91-ec0365fdc719"),
                            Name = "Sydney"
                        },
                        new
                        {
                            Id = new Guid("f396d419-0ffe-4f12-b978-295cee0d8674"),
                            CountryId = new Guid("1cf69d6e-9cb5-408b-a5fd-5ceb742e6341"),
                            Name = "Toronto"
                        },
                        new
                        {
                            Id = new Guid("6bfaafcb-2f26-4d5e-8a30-2b74cd85978f"),
                            CountryId = new Guid("42f42f51-ce20-4e75-a29d-84467c6299d2"),
                            Name = "Mumbai"
                        },
                        new
                        {
                            Id = new Guid("eb359d05-41db-4476-9dac-64469fd1ff4a"),
                            CountryId = new Guid("4d8c6b90-56c6-4796-b311-018e3bf3ff04"),
                            Name = "Cape Town"
                        },
                        new
                        {
                            Id = new Guid("aa464d2b-0c18-47fe-a5e8-dc55e318b35c"),
                            CountryId = new Guid("5ec9b0e6-6203-4c65-96e0-e53b21e96b06"),
                            Name = "Rio de Janeiro"
                        },
                        new
                        {
                            Id = new Guid("b02f3c1a-80ce-49f0-bf67-d6b82bb51425"),
                            CountryId = new Guid("007d4de7-68d5-4f27-b7c9-f67846704329"),
                            Name = "Moscow"
                        },
                        new
                        {
                            Id = new Guid("0b2c376a-047b-448d-b24c-b2464e96ed87"),
                            CountryId = new Guid("6c720483-7a2b-4a6c-a448-f773f4e52198"),
                            Name = "Dubai"
                        },
                        new
                        {
                            Id = new Guid("1c1b9177-bc16-4b40-bb6a-5bd53591d500"),
                            CountryId = new Guid("c191e48a-665c-4fa0-8ab4-d372e8e92b3f"),
                            Name = "Stockholm"
                        },
                        new
                        {
                            Id = new Guid("e0fe560c-8fec-419d-a5b5-b91b07eefbcc"),
                            CountryId = new Guid("e9c50671-4eba-4084-8ea2-eb9de0289eab"),
                            Name = "Seoul"
                        },
                        new
                        {
                            Id = new Guid("e525c652-d742-4505-bcc0-fd9b525f81c7"),
                            CountryId = new Guid("0a602b1f-302a-4d2a-8568-aafe2a3fdae9"),
                            Name = "Mexico City"
                        },
                        new
                        {
                            Id = new Guid("ea578c7a-08a9-4fd6-b8f5-76ad9297b49b"),
                            CountryId = new Guid("b6ef985d-54cc-46d5-b855-bae78f1389a3"),
                            Name = "Amsterdam"
                        },
                        new
                        {
                            Id = new Guid("b677229f-e124-4785-9fce-ae061f92b500"),
                            CountryId = new Guid("38191651-fcf2-4f5d-a600-3b15d72c80dc"),
                            Name = "Oslo"
                        },
                        new
                        {
                            Id = new Guid("5ec8c0dd-6066-4801-848b-c8b43a633f97"),
                            CountryId = new Guid("fcff746d-0dfd-42f1-bde6-fd768a4e859b"),
                            Name = "Hanoi"
                        },
                        new
                        {
                            Id = new Guid("32a8cf08-c789-4741-936e-0ce1c476745b"),
                            CountryId = new Guid("9f0fefcf-8dd1-4eeb-8377-79458f8bbe14"),
                            Name = "Bangkok"
                        },
                        new
                        {
                            Id = new Guid("3a4dd75c-845a-45d8-a201-3b5e9b6b3a67"),
                            CountryId = new Guid("afca7b5b-7a3e-46db-8c5f-2c008106732d"),
                            Name = "Istanbul"
                        },
                        new
                        {
                            Id = new Guid("e5ed705a-3bbf-48e7-aab2-abffa847df9f"),
                            CountryId = new Guid("a1b8dcf7-bb74-4fe7-ae6a-72fccc051cdf"),
                            Name = "Buenos Aires"
                        },
                        new
                        {
                            Id = new Guid("7a90df4d-ac54-4af0-b0dc-8934cd2acbbf"),
                            CountryId = new Guid("6eac7ed4-e5e9-47cd-aac5-891c21ec0362"),
                            Name = "Rome"
                        },
                        new
                        {
                            Id = new Guid("2f61c1e4-503a-429a-9ef8-a9370b5a130f"),
                            CountryId = new Guid("cf558518-4fcd-407d-af17-d2ea7b69f8fb"),
                            Name = "Cairo"
                        },
                        new
                        {
                            Id = new Guid("b0d78778-b415-4ccb-a3e2-df367b7600bd"),
                            CountryId = new Guid("41957370-cb8a-43e4-9dbc-ee62e8ee2a73"),
                            Name = "Lagos"
                        },
                        new
                        {
                            Id = new Guid("3b66965a-a11e-4538-80d0-60cc2884e009"),
                            CountryId = new Guid("f2341b6d-b07d-4a60-84f9-43f0577ffa82"),
                            Name = "Auckland"
                        },
                        new
                        {
                            Id = new Guid("492f025f-bc7a-48c7-8fb1-c3905291db1c"),
                            CountryId = new Guid("39ce674c-fec4-4126-8cb7-8902d167281a"),
                            Name = "Nairobi"
                        },
                        new
                        {
                            Id = new Guid("856185e1-d678-4ad2-8bff-2c89b4e25848"),
                            CountryId = new Guid("c2f1cd06-9c4c-4ed5-9d18-a38e5d21672d"),
                            Name = "Barcelona"
                        },
                        new
                        {
                            Id = new Guid("64f5ea09-574f-46aa-856f-83cf7c3be8c6"),
                            CountryId = new Guid("a90016fd-a1fd-4818-8cd9-6e1a4a2ec90b"),
                            Name = "Athens"
                        },
                        new
                        {
                            Id = new Guid("af9b1de7-b91d-477d-8f28-1e9eace6c8b9"),
                            CountryId = new Guid("790b72fa-613b-467d-94a0-55ec166819fe"),
                            Name = "Dublin"
                        },
                        new
                        {
                            Id = new Guid("041e6e48-b2e0-4c47-857b-72c1d93fa8b5"),
                            CountryId = new Guid("7ccbcd8c-65d9-4f8b-a62b-6977a5c976c2"),
                            Name = "Zurich"
                        },
                        new
                        {
                            Id = new Guid("95a4edf0-749a-4c8d-8cd0-02637485bdf1"),
                            CountryId = new Guid("46e137c9-057d-4cfa-a7f1-c2980670839f"),
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = new Guid("a8a9c9bd-9de8-43b2-8a71-dfc9054ddba3"),
                            CountryId = new Guid("8af7019d-d131-4ccb-9441-97014afdc9cb"),
                            Name = "Vienna"
                        },
                        new
                        {
                            Id = new Guid("01c8955b-8555-4d3c-a1ce-374efa84cc77"),
                            CountryId = new Guid("187b6967-3d53-424d-ab30-8a2c5a94db36"),
                            Name = "Hong Kong"
                        },
                        new
                        {
                            Id = new Guid("d1a4f380-3df2-43a5-83ad-fb60c0827f9d"),
                            CountryId = new Guid("e12a166a-b472-43d2-bcc7-811c0bba2a0a"),
                            Name = "Copenhagen"
                        },
                        new
                        {
                            Id = new Guid("24e87191-823e-4386-b60b-de8f8a238315"),
                            CountryId = new Guid("a4cd7feb-cf1a-49f9-802d-8c04e34f9d5d"),
                            Name = "Lisbon"
                        },
                        new
                        {
                            Id = new Guid("23f3a5f7-1ec3-421d-9fb9-d2276bc90544"),
                            CountryId = new Guid("cb466514-a22f-4d8c-a3cf-4f7aa3255075"),
                            Name = "Warsaw"
                        },
                        new
                        {
                            Id = new Guid("84f1a18d-d811-4d7e-b4e8-363459994c7e"),
                            CountryId = new Guid("54bd5187-5a91-4596-aa86-b2fb860c003e"),
                            Name = "Prague"
                        },
                        new
                        {
                            Id = new Guid("50dfc2fd-809b-47c9-bef2-818f555db80e"),
                            CountryId = new Guid("ec35c7aa-fd80-4150-8cbf-438d0bb9cacf"),
                            Name = "Budapest"
                        },
                        new
                        {
                            Id = new Guid("fd3c2fc3-de54-46dc-b1ec-1c4245ae5c67"),
                            CountryId = new Guid("95f9a759-7cf6-4af7-a14c-275255759cf2"),
                            Name = "Brussels"
                        },
                        new
                        {
                            Id = new Guid("0726e8d4-14f2-4c0c-8d0b-27baf65a79d5"),
                            CountryId = new Guid("e96713ce-bc52-4be9-8671-c44f9d2e453a"),
                            Name = "Helsinki"
                        });
                });

            modelBuilder.Entity("SmartHome.Data.Entities.CountryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e9c7a64a-e63d-46b5-82fa-691fcee8f3b2"),
                            Name = "USA"
                        },
                        new
                        {
                            Id = new Guid("c6dbb66f-079f-46eb-9742-676454e4b40f"),
                            Name = "UK"
                        },
                        new
                        {
                            Id = new Guid("4dac9f7f-58ea-4279-87e4-4f3579a7e8cc"),
                            Name = "France"
                        },
                        new
                        {
                            Id = new Guid("f6a2c7ef-2e5c-44dd-a2dc-ac06dbf9fe4a"),
                            Name = "Germany"
                        },
                        new
                        {
                            Id = new Guid("875f4325-353d-4ac3-9a85-c3a0be0e5f82"),
                            Name = "Japan"
                        },
                        new
                        {
                            Id = new Guid("187b6967-3d53-424d-ab30-8a2c5a94db36"),
                            Name = "China"
                        },
                        new
                        {
                            Id = new Guid("b88df85f-0338-4196-8c91-ec0365fdc719"),
                            Name = "Australia"
                        },
                        new
                        {
                            Id = new Guid("1cf69d6e-9cb5-408b-a5fd-5ceb742e6341"),
                            Name = "Canada"
                        },
                        new
                        {
                            Id = new Guid("42f42f51-ce20-4e75-a29d-84467c6299d2"),
                            Name = "India"
                        },
                        new
                        {
                            Id = new Guid("4d8c6b90-56c6-4796-b311-018e3bf3ff04"),
                            Name = "South Africa"
                        },
                        new
                        {
                            Id = new Guid("5ec9b0e6-6203-4c65-96e0-e53b21e96b06"),
                            Name = "Brazil"
                        },
                        new
                        {
                            Id = new Guid("007d4de7-68d5-4f27-b7c9-f67846704329"),
                            Name = "Russia"
                        },
                        new
                        {
                            Id = new Guid("6c720483-7a2b-4a6c-a448-f773f4e52198"),
                            Name = "UAE"
                        },
                        new
                        {
                            Id = new Guid("c191e48a-665c-4fa0-8ab4-d372e8e92b3f"),
                            Name = "Sweden"
                        },
                        new
                        {
                            Id = new Guid("e9c50671-4eba-4084-8ea2-eb9de0289eab"),
                            Name = "South Korea"
                        },
                        new
                        {
                            Id = new Guid("0a602b1f-302a-4d2a-8568-aafe2a3fdae9"),
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = new Guid("b6ef985d-54cc-46d5-b855-bae78f1389a3"),
                            Name = "Netherlands"
                        },
                        new
                        {
                            Id = new Guid("38191651-fcf2-4f5d-a600-3b15d72c80dc"),
                            Name = "Norway"
                        },
                        new
                        {
                            Id = new Guid("fcff746d-0dfd-42f1-bde6-fd768a4e859b"),
                            Name = "Vietnam"
                        },
                        new
                        {
                            Id = new Guid("9f0fefcf-8dd1-4eeb-8377-79458f8bbe14"),
                            Name = "Thailand"
                        },
                        new
                        {
                            Id = new Guid("afca7b5b-7a3e-46db-8c5f-2c008106732d"),
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = new Guid("a1b8dcf7-bb74-4fe7-ae6a-72fccc051cdf"),
                            Name = "Argentina"
                        },
                        new
                        {
                            Id = new Guid("6eac7ed4-e5e9-47cd-aac5-891c21ec0362"),
                            Name = "Italy"
                        },
                        new
                        {
                            Id = new Guid("cf558518-4fcd-407d-af17-d2ea7b69f8fb"),
                            Name = "Egypt"
                        },
                        new
                        {
                            Id = new Guid("41957370-cb8a-43e4-9dbc-ee62e8ee2a73"),
                            Name = "Nigeria"
                        },
                        new
                        {
                            Id = new Guid("f2341b6d-b07d-4a60-84f9-43f0577ffa82"),
                            Name = "New Zealand"
                        },
                        new
                        {
                            Id = new Guid("39ce674c-fec4-4126-8cb7-8902d167281a"),
                            Name = "Kenya"
                        },
                        new
                        {
                            Id = new Guid("c2f1cd06-9c4c-4ed5-9d18-a38e5d21672d"),
                            Name = "Spain"
                        },
                        new
                        {
                            Id = new Guid("a90016fd-a1fd-4818-8cd9-6e1a4a2ec90b"),
                            Name = "Greece"
                        },
                        new
                        {
                            Id = new Guid("790b72fa-613b-467d-94a0-55ec166819fe"),
                            Name = "Ireland"
                        },
                        new
                        {
                            Id = new Guid("7ccbcd8c-65d9-4f8b-a62b-6977a5c976c2"),
                            Name = "Switzerland"
                        },
                        new
                        {
                            Id = new Guid("46e137c9-057d-4cfa-a7f1-c2980670839f"),
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = new Guid("8af7019d-d131-4ccb-9441-97014afdc9cb"),
                            Name = "Austria"
                        },
                        new
                        {
                            Id = new Guid("e12a166a-b472-43d2-bcc7-811c0bba2a0a"),
                            Name = "Denmark"
                        },
                        new
                        {
                            Id = new Guid("a4cd7feb-cf1a-49f9-802d-8c04e34f9d5d"),
                            Name = "Portugal"
                        },
                        new
                        {
                            Id = new Guid("cb466514-a22f-4d8c-a3cf-4f7aa3255075"),
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("54bd5187-5a91-4596-aa86-b2fb860c003e"),
                            Name = "Czech Republic"
                        },
                        new
                        {
                            Id = new Guid("ec35c7aa-fd80-4150-8cbf-438d0bb9cacf"),
                            Name = "Hungary"
                        },
                        new
                        {
                            Id = new Guid("95f9a759-7cf6-4af7-a14c-275255759cf2"),
                            Name = "Belgium"
                        },
                        new
                        {
                            Id = new Guid("e96713ce-bc52-4be9-8671-c44f9d2e453a"),
                            Name = "Finland"
                        });
                });

            modelBuilder.Entity("SmartHome.Data.Entities.PropertyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("AreaSquareMeters")
                        .HasColumnType("double precision");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("NumberOfFloors")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Connection")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DeviceStatus")
                        .HasColumnType("integer");

                    b.Property<int>("DeviceType")
                        .HasColumnType("integer");

                    b.Property<float>("EnergySpending")
                        .HasColumnType("real");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PowerSupply")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SmartDevices");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SolarPanelEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("Efficiency")
                        .HasColumnType("real");

                    b.Property<float>("Size")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("SolarPanels");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SprinkleModeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ModeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SprinkleModes");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.WashingMachineModeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ModeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("WashingMachineEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WashingMachineEntityId");

                    b.ToTable("WashingMachineModes");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.AirConditionerEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<float>("CurrentTemperature")
                        .HasColumnType("real");

                    b.Property<float>("MaximumTemperature")
                        .HasColumnType("real");

                    b.Property<float>("MinimumTemperature")
                        .HasColumnType("real");

                    b.Property<int>("Mode")
                        .HasColumnType("integer");

                    b.ToTable("AirConditioners", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.CarChargerEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<float>("ChargingPower")
                        .HasColumnType("real");

                    b.Property<int>("ConnectorNumber")
                        .HasColumnType("integer");

                    b.ToTable("CarChargers", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.CarGateEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<List<string>>("AllowedLicensePlates")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Mode")
                        .HasColumnType("integer");

                    b.Property<bool>("isCarClose")
                        .HasColumnType("boolean");

                    b.ToTable("CarGates", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.EnvironmentalConditionsSensorEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<float>("AirHumidity")
                        .HasColumnType("real");

                    b.Property<float>("RoomTemperature")
                        .HasColumnType("real");

                    b.ToTable("EnvironmentalConditionsSensors", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.HomeBatteryEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<float>("BatteryLevel")
                        .HasColumnType("real");

                    b.Property<float>("BatterySize")
                        .HasColumnType("real");

                    b.ToTable("HomeBatteries", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.LampEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<float>("CurrentLight")
                        .HasColumnType("real");

                    b.Property<float>("LightThreshold")
                        .HasColumnType("real");

                    b.ToTable("Lamps", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SolarPanelSystemEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.ToTable("SolarPanelSystems", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SprinklerEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<Guid>("ModeId")
                        .HasColumnType("uuid");

                    b.HasIndex("ModeId");

                    b.ToTable("Sprinklers", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.WashingMachineEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<Guid?>("CurrentModeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasIndex("CurrentModeId");

                    b.ToTable("WashingMachines", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.CityEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.CountryEntity", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.PropertyEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.CityEntity", "City")
                        .WithMany("Properties")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.WashingMachineModeEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.WashingMachineEntity", null)
                        .WithMany("Modes")
                        .HasForeignKey("WashingMachineEntityId");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.AirConditionerEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.AirConditionerEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.CarChargerEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.CarChargerEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.CarGateEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.CarGateEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.EnvironmentalConditionsSensorEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.EnvironmentalConditionsSensorEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.HomeBatteryEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.HomeBatteryEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.LampEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.LampEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SolarPanelSystemEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.SolarPanelSystemEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SprinklerEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.SprinklerEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SprinkleModeEntity", "Mode")
                        .WithMany()
                        .HasForeignKey("ModeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mode");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.WashingMachineEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.WashingMachineModeEntity", "CurrentMode")
                        .WithMany()
                        .HasForeignKey("CurrentModeId");

                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.WashingMachineEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentMode");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.CityEntity", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.CountryEntity", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.WashingMachineEntity", b =>
                {
                    b.Navigation("Modes");
                });
#pragma warning restore 612, 618
        }
    }
}
