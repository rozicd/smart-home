// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SmartHome.Data;

#nullable disable

namespace SmartHome.Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20231120143343_testss")]
    partial class testss
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SmartHome.Data.Entities.ActivationTokenEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("expires")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("ActivationTokens");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.CityEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("252cbef8-536b-47c8-9617-73d40d473446"),
                            CountryId = new Guid("52b85311-a54b-4a54-a483-244b54f71ffb"),
                            Name = "New York"
                        },
                        new
                        {
                            Id = new Guid("b0121ff8-0f52-4769-afc0-618b2e417165"),
                            CountryId = new Guid("52b85311-a54b-4a54-a483-244b54f71ffb"),
                            Name = "Los Angeles"
                        },
                        new
                        {
                            Id = new Guid("0ddccc71-4278-48ba-a3cf-85278e71802f"),
                            CountryId = new Guid("52b85311-a54b-4a54-a483-244b54f71ffb"),
                            Name = "Chicago"
                        },
                        new
                        {
                            Id = new Guid("87579910-4811-4e7e-8528-547120593464"),
                            CountryId = new Guid("9c9b3260-07e6-4d84-9644-bd0e8ad77559"),
                            Name = "London"
                        },
                        new
                        {
                            Id = new Guid("9db3a3c3-7cb6-40ab-a61b-653d3c1893d3"),
                            CountryId = new Guid("9f4d4a88-e2b8-47cf-ae47-9ea74a6a5945"),
                            Name = "Paris"
                        },
                        new
                        {
                            Id = new Guid("ed850d2e-98c4-4741-8b2b-4f1b5eb2fd0e"),
                            CountryId = new Guid("c0b5867d-dd77-4be9-b67c-94a1d3407c09"),
                            Name = "Berlin"
                        },
                        new
                        {
                            Id = new Guid("4e203e4c-3e91-4be3-ae15-8f069f7df54e"),
                            CountryId = new Guid("e2f0262c-0ffa-4567-a056-149223bb5e2b"),
                            Name = "Tokyo"
                        },
                        new
                        {
                            Id = new Guid("ef7c2cbc-01cc-4f4d-a1ed-1085e60e4ea9"),
                            CountryId = new Guid("045f42d5-c3d9-43ca-92a5-127e9a22047a"),
                            Name = "Beijing"
                        },
                        new
                        {
                            Id = new Guid("4e74b279-134e-429e-9f12-07618b04cc0b"),
                            CountryId = new Guid("478a9b87-98a7-479d-84af-2e34b7e08734"),
                            Name = "Sydney"
                        },
                        new
                        {
                            Id = new Guid("7ad68124-8c52-4875-8524-0c685b213e95"),
                            CountryId = new Guid("d22fa459-6392-4087-8032-c91629911001"),
                            Name = "Toronto"
                        },
                        new
                        {
                            Id = new Guid("ec4a5fa4-9b6f-488f-b950-797334c17702"),
                            CountryId = new Guid("3ec86250-c4f1-466a-8531-0f73685e9983"),
                            Name = "Mumbai"
                        },
                        new
                        {
                            Id = new Guid("99970f6d-eff6-4998-bf38-c457c236c704"),
                            CountryId = new Guid("7ceffbfe-2856-499b-8934-6ed7a9795e70"),
                            Name = "Cape Town"
                        },
                        new
                        {
                            Id = new Guid("cb47050e-e56e-4f1d-ab15-14330d2734e5"),
                            CountryId = new Guid("5c3db35f-1aeb-45c4-9b5c-1fbb3b3090fd"),
                            Name = "Rio de Janeiro"
                        },
                        new
                        {
                            Id = new Guid("567004d3-c3ce-4303-8b69-288324e53e4f"),
                            CountryId = new Guid("91841369-6f81-40c7-b51d-69bd7f48fb95"),
                            Name = "Moscow"
                        },
                        new
                        {
                            Id = new Guid("886b7ee4-56d7-4dc3-a5ff-6af07ab9b17a"),
                            CountryId = new Guid("c5086443-129b-47dd-b4ed-aa65d0cc64f5"),
                            Name = "Dubai"
                        },
                        new
                        {
                            Id = new Guid("f5819ea5-a149-47be-9225-22327bb647ea"),
                            CountryId = new Guid("9d7e46f0-d2bf-4d7b-b8e6-a93598749f63"),
                            Name = "Stockholm"
                        },
                        new
                        {
                            Id = new Guid("13a7df59-b65f-467b-9b34-8bc08d8474f2"),
                            CountryId = new Guid("d028b656-5e46-482f-b033-38fa0599d4fd"),
                            Name = "Seoul"
                        },
                        new
                        {
                            Id = new Guid("4d949bf9-69a7-4fc4-87eb-0f5aaebea027"),
                            CountryId = new Guid("59d05aa7-03ed-4e59-9e43-1520923766c5"),
                            Name = "Mexico City"
                        },
                        new
                        {
                            Id = new Guid("b302da91-4e2a-430e-8ae6-d13d04d08256"),
                            CountryId = new Guid("63de4049-fab7-402a-abc8-57ab548fdc1a"),
                            Name = "Amsterdam"
                        },
                        new
                        {
                            Id = new Guid("acda80c2-867b-4fba-aef1-f6e677f7eb30"),
                            CountryId = new Guid("0803dc59-89ce-4cfc-b0b2-5b6c54ce64a7"),
                            Name = "Oslo"
                        },
                        new
                        {
                            Id = new Guid("c8a6ae11-fddc-4da7-aafd-26583a509d0f"),
                            CountryId = new Guid("9371d39a-7348-4b38-8ce6-ba6c8a7ee117"),
                            Name = "Hanoi"
                        },
                        new
                        {
                            Id = new Guid("319388a2-8a9a-4cce-896e-581ee42ad6d6"),
                            CountryId = new Guid("6cf733d1-cd66-4d47-8771-0af9c69b1353"),
                            Name = "Bangkok"
                        },
                        new
                        {
                            Id = new Guid("70a3cd86-735e-46b5-b7c8-04a28679c306"),
                            CountryId = new Guid("59a3b6f2-0a52-4ece-91ad-d1e82c8e76af"),
                            Name = "Istanbul"
                        },
                        new
                        {
                            Id = new Guid("a72d356e-1480-4411-b4c2-ba5bd48668e5"),
                            CountryId = new Guid("17e9fd33-e93d-4023-a78c-42a45746a5be"),
                            Name = "Buenos Aires"
                        },
                        new
                        {
                            Id = new Guid("ab7913b3-51b3-4428-a02e-a1e5b88d0194"),
                            CountryId = new Guid("c3170370-a4d7-4e13-8213-6158ff33f1e0"),
                            Name = "Rome"
                        },
                        new
                        {
                            Id = new Guid("34d43665-d6b2-44b6-843b-995f401fda47"),
                            CountryId = new Guid("60307129-48f4-43df-a576-ec74c18043b9"),
                            Name = "Cairo"
                        },
                        new
                        {
                            Id = new Guid("32c8a152-b4e0-46d9-ac9c-60d5f5a21bdd"),
                            CountryId = new Guid("26aeb71d-cda4-4ad8-a261-fd8c40e402e2"),
                            Name = "Lagos"
                        },
                        new
                        {
                            Id = new Guid("d309f76c-df6a-4211-8056-3a5ffe8a1b01"),
                            CountryId = new Guid("a1ddb73e-8de9-433e-b03e-6615deccc12d"),
                            Name = "Auckland"
                        },
                        new
                        {
                            Id = new Guid("dad305e8-6533-4f91-b03e-d538d174c3d7"),
                            CountryId = new Guid("e4cc77ea-e360-457e-9b3a-e82d5560974f"),
                            Name = "Nairobi"
                        },
                        new
                        {
                            Id = new Guid("7b16c0c7-607d-4f52-81ab-8a8f02cc64ce"),
                            CountryId = new Guid("409cf3ad-5332-406a-b4c9-a6b7ea870f84"),
                            Name = "Barcelona"
                        },
                        new
                        {
                            Id = new Guid("e2a84088-4f7b-4a46-ba97-f9f4063e3e61"),
                            CountryId = new Guid("e1447b0f-0fe5-4958-a127-3d890325d00b"),
                            Name = "Athens"
                        },
                        new
                        {
                            Id = new Guid("39b64ae7-c4f6-4493-8414-7926717488fe"),
                            CountryId = new Guid("b0f58408-ae11-4534-b11e-3200c0435cf0"),
                            Name = "Dublin"
                        },
                        new
                        {
                            Id = new Guid("5812a5f2-dd84-4499-8c1e-9926724a4e9b"),
                            CountryId = new Guid("2208ac14-88cc-4cc0-a57c-d6fb3875a321"),
                            Name = "Zurich"
                        },
                        new
                        {
                            Id = new Guid("d044ea28-fd62-4a62-b1dd-38a65a78a4fd"),
                            CountryId = new Guid("0b43694d-a33a-4ccb-8ec6-ed6880925fb1"),
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = new Guid("4d391827-c78a-4117-8038-ef786502f7a3"),
                            CountryId = new Guid("f0c3c785-2593-436e-809f-a8ee3e9456eb"),
                            Name = "Vienna"
                        },
                        new
                        {
                            Id = new Guid("f725c43c-cf8e-4247-bb82-d413b3f580a3"),
                            CountryId = new Guid("045f42d5-c3d9-43ca-92a5-127e9a22047a"),
                            Name = "Hong Kong"
                        },
                        new
                        {
                            Id = new Guid("7e7b9f4c-a61c-4e46-8c0e-fff51e2221a3"),
                            CountryId = new Guid("80568834-32d8-4b15-a780-e75d651a9f5b"),
                            Name = "Copenhagen"
                        },
                        new
                        {
                            Id = new Guid("c01403d7-50e7-4ef4-a51d-f60b27142176"),
                            CountryId = new Guid("ffb6e493-e33b-4813-a905-4fc8d7b03e50"),
                            Name = "Lisbon"
                        },
                        new
                        {
                            Id = new Guid("477fc751-77b0-44f8-b872-0a420a3d6290"),
                            CountryId = new Guid("f306d120-66ec-4d0f-9151-e6095095e75f"),
                            Name = "Warsaw"
                        },
                        new
                        {
                            Id = new Guid("dc503588-4863-4691-bfd5-0a1e53350969"),
                            CountryId = new Guid("f1eca1e3-ef5d-4ad2-8b24-61c944b1aa1a"),
                            Name = "Prague"
                        },
                        new
                        {
                            Id = new Guid("c8b0a223-1c55-47df-9b4a-28f183098f08"),
                            CountryId = new Guid("106d71a9-7b79-4164-a468-fdeba9cea694"),
                            Name = "Budapest"
                        },
                        new
                        {
                            Id = new Guid("a5026003-17d9-4731-846b-09ff6cb39eb1"),
                            CountryId = new Guid("facadbc8-ff7d-4621-a2ae-66bf6a6021ee"),
                            Name = "Brussels"
                        },
                        new
                        {
                            Id = new Guid("5d6023c8-b399-453d-bf87-5207ed42e22c"),
                            CountryId = new Guid("1ea15fa3-b1bd-48ee-9dca-d21a7d6949c6"),
                            Name = "Helsinki"
                        });
                });

            modelBuilder.Entity("SmartHome.Data.Entities.CountryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("52b85311-a54b-4a54-a483-244b54f71ffb"),
                            Name = "USA"
                        },
                        new
                        {
                            Id = new Guid("9c9b3260-07e6-4d84-9644-bd0e8ad77559"),
                            Name = "UK"
                        },
                        new
                        {
                            Id = new Guid("9f4d4a88-e2b8-47cf-ae47-9ea74a6a5945"),
                            Name = "France"
                        },
                        new
                        {
                            Id = new Guid("c0b5867d-dd77-4be9-b67c-94a1d3407c09"),
                            Name = "Germany"
                        },
                        new
                        {
                            Id = new Guid("e2f0262c-0ffa-4567-a056-149223bb5e2b"),
                            Name = "Japan"
                        },
                        new
                        {
                            Id = new Guid("045f42d5-c3d9-43ca-92a5-127e9a22047a"),
                            Name = "China"
                        },
                        new
                        {
                            Id = new Guid("478a9b87-98a7-479d-84af-2e34b7e08734"),
                            Name = "Australia"
                        },
                        new
                        {
                            Id = new Guid("d22fa459-6392-4087-8032-c91629911001"),
                            Name = "Canada"
                        },
                        new
                        {
                            Id = new Guid("3ec86250-c4f1-466a-8531-0f73685e9983"),
                            Name = "India"
                        },
                        new
                        {
                            Id = new Guid("7ceffbfe-2856-499b-8934-6ed7a9795e70"),
                            Name = "South Africa"
                        },
                        new
                        {
                            Id = new Guid("5c3db35f-1aeb-45c4-9b5c-1fbb3b3090fd"),
                            Name = "Brazil"
                        },
                        new
                        {
                            Id = new Guid("91841369-6f81-40c7-b51d-69bd7f48fb95"),
                            Name = "Russia"
                        },
                        new
                        {
                            Id = new Guid("c5086443-129b-47dd-b4ed-aa65d0cc64f5"),
                            Name = "UAE"
                        },
                        new
                        {
                            Id = new Guid("9d7e46f0-d2bf-4d7b-b8e6-a93598749f63"),
                            Name = "Sweden"
                        },
                        new
                        {
                            Id = new Guid("d028b656-5e46-482f-b033-38fa0599d4fd"),
                            Name = "South Korea"
                        },
                        new
                        {
                            Id = new Guid("59d05aa7-03ed-4e59-9e43-1520923766c5"),
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = new Guid("63de4049-fab7-402a-abc8-57ab548fdc1a"),
                            Name = "Netherlands"
                        },
                        new
                        {
                            Id = new Guid("0803dc59-89ce-4cfc-b0b2-5b6c54ce64a7"),
                            Name = "Norway"
                        },
                        new
                        {
                            Id = new Guid("9371d39a-7348-4b38-8ce6-ba6c8a7ee117"),
                            Name = "Vietnam"
                        },
                        new
                        {
                            Id = new Guid("6cf733d1-cd66-4d47-8771-0af9c69b1353"),
                            Name = "Thailand"
                        },
                        new
                        {
                            Id = new Guid("59a3b6f2-0a52-4ece-91ad-d1e82c8e76af"),
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = new Guid("17e9fd33-e93d-4023-a78c-42a45746a5be"),
                            Name = "Argentina"
                        },
                        new
                        {
                            Id = new Guid("c3170370-a4d7-4e13-8213-6158ff33f1e0"),
                            Name = "Italy"
                        },
                        new
                        {
                            Id = new Guid("60307129-48f4-43df-a576-ec74c18043b9"),
                            Name = "Egypt"
                        },
                        new
                        {
                            Id = new Guid("26aeb71d-cda4-4ad8-a261-fd8c40e402e2"),
                            Name = "Nigeria"
                        },
                        new
                        {
                            Id = new Guid("a1ddb73e-8de9-433e-b03e-6615deccc12d"),
                            Name = "New Zealand"
                        },
                        new
                        {
                            Id = new Guid("e4cc77ea-e360-457e-9b3a-e82d5560974f"),
                            Name = "Kenya"
                        },
                        new
                        {
                            Id = new Guid("409cf3ad-5332-406a-b4c9-a6b7ea870f84"),
                            Name = "Spain"
                        },
                        new
                        {
                            Id = new Guid("e1447b0f-0fe5-4958-a127-3d890325d00b"),
                            Name = "Greece"
                        },
                        new
                        {
                            Id = new Guid("b0f58408-ae11-4534-b11e-3200c0435cf0"),
                            Name = "Ireland"
                        },
                        new
                        {
                            Id = new Guid("2208ac14-88cc-4cc0-a57c-d6fb3875a321"),
                            Name = "Switzerland"
                        },
                        new
                        {
                            Id = new Guid("0b43694d-a33a-4ccb-8ec6-ed6880925fb1"),
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = new Guid("f0c3c785-2593-436e-809f-a8ee3e9456eb"),
                            Name = "Austria"
                        },
                        new
                        {
                            Id = new Guid("80568834-32d8-4b15-a780-e75d651a9f5b"),
                            Name = "Denmark"
                        },
                        new
                        {
                            Id = new Guid("ffb6e493-e33b-4813-a905-4fc8d7b03e50"),
                            Name = "Portugal"
                        },
                        new
                        {
                            Id = new Guid("f306d120-66ec-4d0f-9151-e6095095e75f"),
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("f1eca1e3-ef5d-4ad2-8b24-61c944b1aa1a"),
                            Name = "Czech Republic"
                        },
                        new
                        {
                            Id = new Guid("106d71a9-7b79-4164-a468-fdeba9cea694"),
                            Name = "Hungary"
                        },
                        new
                        {
                            Id = new Guid("facadbc8-ff7d-4621-a2ae-66bf6a6021ee"),
                            Name = "Belgium"
                        },
                        new
                        {
                            Id = new Guid("1ea15fa3-b1bd-48ee-9dca-d21a7d6949c6"),
                            Name = "Finland"
                        });
                });

            modelBuilder.Entity("SmartHome.Data.Entities.PropertyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("AreaSquareMeters")
                        .HasColumnType("double precision");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("NumberOfFloors")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Connection")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DeviceStatus")
                        .HasColumnType("integer");

                    b.Property<int>("DeviceType")
                        .HasColumnType("integer");

                    b.Property<float>("EnergySpending")
                        .HasColumnType("real");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PowerSupply")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SmartDevices");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SprinkleModeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("SprinkleModeEntity");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.WashingMachineModeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WashingMachineEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WashingMachineEntityId");

                    b.ToTable("WashingMachineModeEntity");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.AirConditionerEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<float>("CurrentTemperature")
                        .HasColumnType("real");

                    b.Property<float>("MaximumTemperature")
                        .HasColumnType("real");

                    b.Property<float>("MinimumTemperature")
                        .HasColumnType("real");

                    b.Property<int>("Mode")
                        .HasColumnType("integer");

                    b.ToTable("AirConditioners", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.CarChargerEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<float>("ChargingPower")
                        .HasColumnType("real");

                    b.Property<int>("ConnectorNumber")
                        .HasColumnType("integer");

                    b.ToTable("CarChargers", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.CarGateEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Mode")
                        .HasColumnType("integer");

                    b.Property<bool>("isCarClose")
                        .HasColumnType("boolean");

                    b.ToTable("CarGates", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.EnvironmentalConditionsSensorEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<float>("AirHumidity")
                        .HasColumnType("real");

                    b.Property<float>("RoomTemperature")
                        .HasColumnType("real");

                    b.ToTable("EnvironmentalConditionsSensors", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.HomeBatteryEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<float>("BatteryLevel")
                        .HasColumnType("real");

                    b.Property<float>("BatterySize")
                        .HasColumnType("real");

                    b.ToTable("HomeBatteries", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.LampEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<float>("CurrentLight")
                        .HasColumnType("real");

                    b.ToTable("Lamps", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SolarPanelSystemEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.ToTable("SolarPanelSystems", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SprinklerEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<Guid>("ModeId")
                        .HasColumnType("uuid");

                    b.HasIndex("ModeId");

                    b.ToTable("Sprinklers", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.WashingMachineEntity", b =>
                {
                    b.HasBaseType("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity");

                    b.Property<Guid>("CurrentModeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasIndex("CurrentModeId");

                    b.ToTable("WashingMachines", (string)null);
                });

            modelBuilder.Entity("SmartHome.Data.Entities.CityEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.CountryEntity", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.PropertyEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.CityEntity", "City")
                        .WithMany("Properties")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.WashingMachineModeEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.WashingMachineEntity", null)
                        .WithMany("Modes")
                        .HasForeignKey("WashingMachineEntityId");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.AirConditionerEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.AirConditionerEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.CarChargerEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.CarChargerEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.CarGateEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.CarGateEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.EnvironmentalConditionsSensorEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.EnvironmentalConditionsSensorEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.HomeBatteryEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.HomeBatteryEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.LampEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.LampEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SolarPanelSystemEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.SolarPanelSystemEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.SprinklerEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.SprinklerEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SprinkleModeEntity", "Mode")
                        .WithMany()
                        .HasForeignKey("ModeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mode");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.WashingMachineEntity", b =>
                {
                    b.HasOne("SmartHome.Data.Entities.SmartDevices.WashingMachineModeEntity", "CurrentMode")
                        .WithMany()
                        .HasForeignKey("CurrentModeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHome.Data.Entities.SmartDevices.SmartDeviceEntity", null)
                        .WithOne()
                        .HasForeignKey("SmartHome.Data.Entities.SmartDevices.WashingMachineEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentMode");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.CityEntity", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.CountryEntity", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("SmartHome.Data.Entities.SmartDevices.WashingMachineEntity", b =>
                {
                    b.Navigation("Modes");
                });
#pragma warning restore 612, 618
        }
    }
}
